{
  "version": 3,
  "file": "angular-calendar.umd.min.js",
  "sources": [
    "ng://angular-calendar/src/modules/common/calendar-event-actions.component.ts",
    "ng://angular-calendar/src/modules/common/calendar-event-title.component.ts",
    "ng://angular-calendar/src/modules/common/calendar-tooltip.directive.ts",
    "ng://angular-calendar/src/modules/common/calendar-previous-view.directive.ts",
    "ng://angular-calendar/src/modules/common/calendar-next-view.directive.ts",
    "ng://angular-calendar/src/modules/common/calendar-today.directive.ts",
    "ng://angular-calendar/src/modules/common/calendar-angular-date-formatter.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-date.pipe.ts",
    "ng://angular-calendar/src/modules/common/calendar-event-title-formatter.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-event-title.pipe.ts",
    "ng://angular-calendar/src/modules/common/click.directive.ts",
    "ng://angular-calendar/src/modules/common/calendar-utils.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-moment-date-formatter.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-native-date-formatter.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-common.module.ts",
    "ng://angular-calendar/src/modules/month/calendar-month-view.component.ts",
    "ng://angular-calendar/src/modules/month/calendar-month-view-header.component.ts",
    "ng://angular-calendar/src/modules/month/calendar-month-cell.component.ts",
    "ng://angular-calendar/src/modules/month/calendar-open-day-events.component.ts",
    "ng://angular-calendar/src/modules/month/calendar-month.module.ts",
    "ng://angular-calendar/src/modules/common/calendar-drag-helper.provider.ts",
    "ng://angular-calendar/src/modules/common/calendar-resize-helper.provider.ts",
    "ng://angular-calendar/src/modules/week/calendar-week-view.component.ts",
    "ng://angular-calendar/src/modules/week/calendar-week-view-header.component.ts",
    "ng://angular-calendar/src/modules/week/calendar-week-view-event.component.ts",
    "ng://angular-calendar/src/modules/day/calendar-day-view.component.ts",
    "ng://angular-calendar/src/modules/week/calendar-week.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByIndex } from './util';\n\n@Component({\n  selector: 'mwl-calendar-event-actions',\n  template: `\n    <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\n      <a\n        class=\"cal-event-action\"\n        href=\"javascript:;\"\n        *ngFor=\"let action of event.actions; trackBy:trackByIndex\"\n        (mwlClick)=\"action.onClick({event: event})\"\n        [ngClass]=\"action.cssClass\"\n        [innerHtml]=\"action.label\">\n      </a>\n    </span>\n  `\n})\nexport class CalendarEventActionsComponent {\n  @Input() event: CalendarEvent;\n  trackByIndex = trackByIndex;\n}\n",
    "import { Component, Input, TemplateRef } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-event-title',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-event=\"event\"\n      let-view=\"view\">\n      <a\n        class=\"cal-event-title\"\n        href=\"javascript:;\"\n        [innerHTML]=\"event.title | calendarEventTitle:view:event\">\n      </a>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        view: view\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarEventTitleComponent {\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() view: string;\n}\n",
    "import {\n  Directive,\n  Component,\n  HostListener,\n  OnDestroy,\n  Input,\n  ComponentRef,\n  Injector,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  ElementRef,\n  ComponentFactory,\n  Inject,\n  Renderer2,\n  TemplateRef\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Positioning } from 'positioning';\nimport { CalendarEvent } from 'calendar-utils';\n\n@Component({\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-contents=\"contents\"\n      let-placement=\"placement\"\n      let-event=\"event\">\n      <div class=\"cal-tooltip\" [ngClass]=\"'cal-tooltip-' + placement\">\n        <div class=\"cal-tooltip-arrow\"></div>\n        <div class=\"cal-tooltip-inner\" [innerHtml]=\"contents\"></div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        contents: contents,\n        placement: placement,\n        event: event\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarTooltipWindowComponent {\n  @Input() contents: string;\n\n  @Input() placement: string;\n\n  @Input() event: CalendarEvent;\n\n  @Input() customTemplate: TemplateRef<any>;\n}\n\n@Directive({\n  selector: '[mwlCalendarTooltip]'\n})\nexport class CalendarTooltipDirective implements OnDestroy {\n  @Input('mwlCalendarTooltip') contents: string; // tslint:disable-line no-input-rename\n\n  @Input('tooltipPlacement') placement: string = 'top'; // tslint:disable-line no-input-rename\n\n  @Input('tooltipTemplate') customTemplate: TemplateRef<any>; // tslint:disable-line no-input-rename\n\n  @Input('tooltipEvent') event: CalendarEvent; // tslint:disable-line no-input-rename\n\n  @Input('tooltipAppendToBody') appendToBody: boolean; // tslint:disable-line no-input-rename\n\n  private tooltipFactory: ComponentFactory<CalendarTooltipWindowComponent>;\n  private tooltipRef: ComponentRef<CalendarTooltipWindowComponent>;\n  private positioning: Positioning = new Positioning();\n\n  constructor(\n    private elementRef: ElementRef,\n    private injector: Injector,\n    private renderer: Renderer2,\n    componentFactoryResolver: ComponentFactoryResolver,\n    private viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private document //tslint:disable-line\n  ) {\n    this.tooltipFactory = componentFactoryResolver.resolveComponentFactory(\n      CalendarTooltipWindowComponent\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.hide();\n  }\n\n  @HostListener('mouseenter')\n  onMouseOver(): void {\n    this.show();\n  }\n\n  @HostListener('mouseleave')\n  onMouseOut(): void {\n    this.hide();\n  }\n\n  private show(): void {\n    if (!this.tooltipRef && this.contents) {\n      this.tooltipRef = this.viewContainerRef.createComponent(\n        this.tooltipFactory,\n        0,\n        this.injector,\n        []\n      );\n      this.tooltipRef.instance.contents = this.contents;\n      this.tooltipRef.instance.placement = this.placement;\n      this.tooltipRef.instance.customTemplate = this.customTemplate;\n      this.tooltipRef.instance.event = this.event;\n      if (this.appendToBody) {\n        this.document.body.appendChild(this.tooltipRef.location.nativeElement);\n      }\n      requestAnimationFrame(() => {\n        this.positionTooltip();\n      });\n    }\n  }\n\n  private hide(): void {\n    if (this.tooltipRef) {\n      this.viewContainerRef.remove(\n        this.viewContainerRef.indexOf(this.tooltipRef.hostView)\n      );\n      this.tooltipRef = null;\n    }\n  }\n\n  private positionTooltip(): void {\n    if (this.tooltipRef) {\n      const targetPosition: ClientRect = this.positioning.positionElements(\n        this.elementRef.nativeElement,\n        this.tooltipRef.location.nativeElement.children[0],\n        this.placement,\n        this.appendToBody\n      );\n\n      const elm: HTMLElement = this.tooltipRef.location.nativeElement\n        .children[0];\n\n      this.renderer.setStyle(elm, 'top', `${targetPosition.top}px`);\n      this.renderer.setStyle(elm, 'left', `${targetPosition.left}px`);\n    }\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport subDays from 'date-fns/sub_days/index';\nimport subWeeks from 'date-fns/sub_weeks/index';\nimport subMonths from 'date-fns/sub_months/index';\n\n/**\n * Change the view date to the previous view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarPreviousView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Previous\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarPreviousView]'\n})\nexport class CalendarPreviousViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const subFn: any = {\n      day: subDays,\n      week: subWeeks,\n      month: subMonths\n    }[this.view];\n\n    this.viewDateChange.emit(subFn(this.viewDate, 1));\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport addDays from 'date-fns/add_days/index';\nimport addWeeks from 'date-fns/add_weeks/index';\nimport addMonths from 'date-fns/add_months/index';\n\n/**\n * Change the view date to the next view. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarNextView\n *  [(viewDate)]=\"viewDate\"\n *  [view]=\"view\">\n *  Next\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarNextView]'\n})\nexport class CalendarNextViewDirective {\n  /**\n   * The current view\n   */\n  @Input() view: string;\n\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    const addFn: any = {\n      day: addDays,\n      week: addWeeks,\n      month: addMonths\n    }[this.view];\n\n    this.viewDateChange.emit(addFn(this.viewDate, 1));\n  }\n}\n",
    "import {\n  Directive,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport startOfToday from 'date-fns/start_of_today/index';\n\n/**\n * Change the view date to the current day. For example:\n *\n * ```typescript\n * <button\n *  mwlCalendarToday\n *  [(viewDate)]=\"viewDate\">\n *  Today\n * </button>\n * ```\n */\n@Directive({\n  selector: '[mwlCalendarToday]'\n})\nexport class CalendarTodayDirective {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * Called when the view date is changed\n   */\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter();\n\n  /**\n   * @hidden\n   */\n  @HostListener('click')\n  onClick(): void {\n    this.viewDateChange.emit(startOfToday());\n  }\n}\n",
    "import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\nimport { DatePipe } from '@angular/common';\n\n/**\n * This will use the angular date pipe to do all date formatting. It is the default date formatter used by the calendar.\n */\nexport class CalendarAngularDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', locale);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'd', locale);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMMM y', locale);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE', locale);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'MMM d', locale);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new DatePipe(locale).transform(date, 'y', locale);\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'h a', locale);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new DatePipe(locale).transform(date, 'EEEE, MMMM d, y', locale);\n  }\n}\n",
    "import { Pipe, PipeTransform, LOCALE_ID, Inject } from '@angular/core';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\n\n/**\n * This pipe is primarily for rendering the current view title. Example usage:\n * ```typescript\n * // where `viewDate` is a `Date` and view is `'month' | 'week' | 'day'`\n * {{ viewDate | calendarDate:(view + 'ViewTitle'):'en' }}\n * ```\n */\n@Pipe({\n  name: 'calendarDate'\n})\nexport class CalendarDatePipe implements PipeTransform {\n  constructor(\n    private dateFormatter: CalendarDateFormatter,\n    @Inject(LOCALE_ID) private locale: string\n  ) {}\n\n  transform(date: Date, method: string, locale: string = this.locale): string {\n    return this.dateFormatter[method]({ date, locale });\n  }\n}\n",
    "import { CalendarEvent } from 'calendar-utils';\n\n/**\n * This class is responsible for displaying all event titles within the calendar. You may override any of its methods via angulars DI to suit your requirements. For example:\n *\n * ```typescript\n * import { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\n *\n * class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\n *\n *   month(event: CalendarEvent): string {\n *     return `Custom prefix: ${event.title}`;\n *   }\n *\n * }\n *\n * // in your component\n * providers: [{\n *  provide: CalendarEventTitleFormatter,\n *  useClass: CustomEventTitleFormatter\n * }]\n * ```\n */\nexport class CalendarEventTitleFormatter {\n  /**\n   * The month view event title.\n   */\n  month(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The month view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  monthTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event title.\n   */\n  week(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The week view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  weekTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event title.\n   */\n  day(event: CalendarEvent): string {\n    return event.title;\n  }\n\n  /**\n   * The day view event tooltip. Return a falsey value from this to disable the tooltip.\n   */\n  dayTooltip(event: CalendarEvent): string {\n    return event.title;\n  }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport { CalendarEvent } from 'calendar-utils';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\n\n@Pipe({\n  name: 'calendarEventTitle'\n})\nexport class CalendarEventTitlePipe implements PipeTransform {\n  constructor(private calendarEventTitle: CalendarEventTitleFormatter) {}\n\n  transform(title: string, titleType: string, event: CalendarEvent): string {\n    return this.calendarEventTitle[titleType](event);\n  }\n}\n",
    "import {\n  Directive,\n  Renderer2,\n  ElementRef,\n  OnInit,\n  OnDestroy,\n  Output,\n  EventEmitter\n} from '@angular/core';\n\n@Directive({\n  selector: '[mwlClick]'\n})\nexport class ClickDirective implements OnInit, OnDestroy {\n  @Output('mwlClick') click: EventEmitter<MouseEvent> = new EventEmitter(); // tslint:disable-line\n\n  private removeListener: () => void;\n\n  constructor(private renderer: Renderer2, private elm: ElementRef) {}\n\n  ngOnInit(): void {\n    const eventName: string =\n      typeof window !== 'undefined' && typeof window['Hammer'] !== 'undefined'\n        ? 'tap'\n        : 'click';\n    this.removeListener = this.renderer.listen(\n      this.elm.nativeElement,\n      eventName,\n      event => {\n        this.click.next(event);\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.removeListener();\n  }\n}\n",
    "import { Injectable } from '@angular/core';\nimport {\n  getMonthView,\n  GetMonthViewArgs,\n  MonthView,\n  getWeekViewHeader,\n  GetWeekViewHeaderArgs,\n  WeekDay,\n  getWeekView,\n  GetWeekViewArgs,\n  getDayView,\n  GetDayViewArgs,\n  DayView,\n  getDayViewHourGrid,\n  GetDayViewHourGridArgs,\n  DayViewHour,\n  WeekView\n} from 'calendar-utils';\n\n@Injectable()\nexport class CalendarUtils {\n  getMonthView(args: GetMonthViewArgs): MonthView {\n    return getMonthView(args);\n  }\n\n  getWeekViewHeader(args: GetWeekViewHeaderArgs): WeekDay[] {\n    return getWeekViewHeader(args);\n  }\n\n  getWeekView(args: GetWeekViewArgs): WeekView {\n    return getWeekView(args);\n  }\n\n  getDayView(args: GetDayViewArgs): DayView {\n    return getDayView(args);\n  }\n\n  getDayViewHourGrid(args: GetDayViewHourGridArgs): DayViewHour[] {\n    return getDayViewHourGrid(args);\n  }\n}\n",
    "import { InjectionToken, Inject } from '@angular/core';\nimport {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\n\nexport const MOMENT: InjectionToken<string> = new InjectionToken('Moment');\n\n/**\n * This will use <a href=\"http://momentjs.com/\" target=\"_blank\">moment</a> to do all date formatting. To use this class:\n *\n * ```typescript\n * import { CalendarDateFormatter, CalendarMomentDateFormatter, MOMENT } from 'angular-calendar';\n * import moment from 'moment';\n *\n * // in your component\n * provide: [{\n *   provide: MOMENT, useValue: moment\n * }, {\n *   provide: CalendarDateFormatter, useClass: CalendarMomentDateFormatter\n * }]\n *\n * ```\n */\nexport class CalendarMomentDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * @hidden\n   */\n  constructor(@Inject(MOMENT) private moment: any) {}\n\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D');\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('MMMM YYYY');\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd');\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('D MMM');\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('[Week] W [of] YYYY');\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('ha');\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return this.moment(date)\n      .locale(locale)\n      .format('dddd, D MMMM, YYYY');\n  }\n}\n",
    "import {\n  CalendarDateFormatterInterface,\n  DateFormatterParams\n} from './calendar-date-formatter.interface';\nimport getISOWeek from 'date-fns/get_iso_week/index';\n\n/**\n * This will use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Intl\" target=\"_blank\">Intl</a> API to do all date formatting.\n *\n * You will need to include a <a href=\"https://github.com/andyearnshaw/Intl.js/\">polyfill</a> for older browsers.\n */\nexport class CalendarNativeDateFormatter\n  implements CalendarDateFormatterInterface {\n  /**\n   * The month view header week day labels\n   */\n  public monthViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The month view cell day number\n   */\n  public monthViewDayNumber({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(date);\n  }\n\n  /**\n   * The month view title\n   */\n  public monthViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      year: 'numeric',\n      month: 'long'\n    }).format(date);\n  }\n\n  /**\n   * The week view header week day labels\n   */\n  public weekViewColumnHeader({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { weekday: 'long' }).format(date);\n  }\n\n  /**\n   * The week view sub header day and month labels\n   */\n  public weekViewColumnSubHeader({\n    date,\n    locale\n  }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'short'\n    }).format(date);\n  }\n\n  /**\n   * The week view title\n   */\n  public weekViewTitle({ date, locale }: DateFormatterParams): string {\n    const year: string = new Intl.DateTimeFormat(locale, {\n      year: 'numeric'\n    }).format(date);\n    const weekNumber: number = getISOWeek(date);\n    return `Week ${weekNumber} of ${year}`;\n  }\n\n  /**\n   * The time formatting down the left hand side of the day view\n   */\n  public dayViewHour({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, { hour: 'numeric' }).format(date);\n  }\n\n  /**\n   * The day view title\n   */\n  public dayViewTitle({ date, locale }: DateFormatterParams): string {\n    return new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n      weekday: 'long'\n    }).format(date);\n  }\n}\n",
    "import { ModuleWithProviders, NgModule, Provider } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DraggableHelper } from 'angular-draggable-droppable';\nimport { CalendarEventActionsComponent } from './calendar-event-actions.component';\nimport { CalendarEventTitleComponent } from './calendar-event-title.component';\nimport {\n  CalendarTooltipDirective,\n  CalendarTooltipWindowComponent\n} from './calendar-tooltip.directive';\nimport { CalendarPreviousViewDirective } from './calendar-previous-view.directive';\nimport { CalendarNextViewDirective } from './calendar-next-view.directive';\nimport { CalendarTodayDirective } from './calendar-today.directive';\nimport { CalendarDatePipe } from './calendar-date.pipe';\nimport { CalendarEventTitlePipe } from './calendar-event-title.pipe';\nimport { ClickDirective } from './click.directive';\nimport { CalendarEventTitleFormatter } from './calendar-event-title-formatter.provider';\nimport { CalendarDateFormatter } from './calendar-date-formatter.provider';\nimport { CalendarUtils } from './calendar-utils.provider';\n\nexport interface CalendarModuleConfig {\n  eventTitleFormatter?: Provider;\n  dateFormatter?: Provider;\n  utils?: Provider;\n}\n\nexport * from './calendar-event-title-formatter.provider';\nexport * from './calendar-moment-date-formatter.provider';\nexport * from './calendar-native-date-formatter.provider';\nexport * from './calendar-angular-date-formatter.provider';\nexport * from './calendar-date-formatter.provider';\nexport * from './calendar-utils.provider';\nexport * from './calendar-date-formatter.interface';\nexport * from './calendar-event-times-changed-event.interface';\n\nexport {\n  CalendarEvent,\n  EventAction as CalendarEventAction,\n  DAYS_OF_WEEK,\n  ViewPeriod as CalendarViewPeriod\n} from 'calendar-utils';\n\n/**\n * Import this module to if you're just using a singular view and want to save on bundle size. Example usage:\n *\n * ```typescript\n * import { CalendarCommonModule } from 'angular-calendar/modules/common';\n * import { CalendarMonthModule } from 'angular-calendar/modules/month';\n *\n * @NgModule({\n *   imports: [\n *     CalendarCommonModule.forRoot(),\n *     CalendarMonthModule\n *   ]\n * })\n * class MyModule {}\n * ```\n *\n */\n@NgModule({\n  declarations: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  imports: [CommonModule],\n  exports: [\n    CalendarEventActionsComponent,\n    CalendarEventTitleComponent,\n    CalendarTooltipWindowComponent,\n    CalendarTooltipDirective,\n    CalendarPreviousViewDirective,\n    CalendarNextViewDirective,\n    CalendarTodayDirective,\n    CalendarDatePipe,\n    CalendarEventTitlePipe,\n    ClickDirective\n  ],\n  entryComponents: [CalendarTooltipWindowComponent]\n})\nexport class CalendarCommonModule {\n  static forRoot(config: CalendarModuleConfig = {}): ModuleWithProviders {\n    return {\n      ngModule: CalendarCommonModule,\n      providers: [\n        DraggableHelper,\n        config.eventTitleFormatter || CalendarEventTitleFormatter,\n        config.dateFormatter || CalendarDateFormatter,\n        config.utils || CalendarUtils\n      ]\n    };\n  }\n}\n",
    "import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  WeekDay,\n  MonthView,\n  MonthViewDay,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport isSameDay from 'date-fns/is_same_day/index';\nimport setDate from 'date-fns/set_date/index';\nimport setMonth from 'date-fns/set_month/index';\nimport setYear from 'date-fns/set_year/index';\nimport getDate from 'date-fns/get_date/index';\nimport getMonth from 'date-fns/get_month/index';\nimport getYear from 'date-fns/get_year/index';\nimport differenceInSeconds from 'date-fns/difference_in_seconds/index';\nimport addSeconds from 'date-fns/add_seconds/index';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface CalendarMonthViewBeforeRenderEvent {\n  header: WeekDay[];\n  body: MonthViewDay[];\n  period: ViewPeriod;\n}\n\n/**\n * Shows all events on a given month. Example usage:\n *\n * ```typescript\n * <mwl-calendar-month-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-month-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-month-view',\n  template: `\n    <div class=\"cal-month-view\">\n      <mwl-calendar-month-view-header\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\">\n      </mwl-calendar-month-view-header>\n      <div class=\"cal-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets; trackByIndex\">\n          <div class=\"cal-cell-row\">\n            <mwl-calendar-month-cell\n              *ngFor=\"let day of (view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)); trackBy:trackByDate\"\n              [class.cal-drag-over]=\"day.dragOver\"\n              [ngClass]=\"day?.cssClass\"\n              [day]=\"day\"\n              [openDay]=\"openDay\"\n              [locale]=\"locale\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"handleDayClick($event, day)\"\n              (highlightDay)=\"toggleDayHighlight($event.event, true)\"\n              (unhighlightDay)=\"toggleDayHighlight($event.event, false)\"\n              mwlDroppable\n              (dragEnter)=\"day.dragOver = true\"\n              (dragLeave)=\"day.dragOver = false\"\n              (drop)=\"day.dragOver = false; eventDropped(day, $event.dropData.event)\"\n              (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n            </mwl-calendar-month-cell>\n          </div>\n          <mwl-calendar-open-day-events\n            [isOpen]=\"openRowIndex === rowIndex\"\n            [events]=\"openDay?.events\"\n            [customTemplate]=\"openDayEventsTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: $event.event})\">\n          </mwl-calendar-open-day-events>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarMonthViewComponent\n  implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view.\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * Whether the events list for the day of the `viewDate` option is visible or not\n   */\n  @Input() activeDayIsOpen: boolean = false;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use to replace the day cell\n   */\n  @Input() cellTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for the slide down box of events for the active day\n   */\n  @Input() openDayEventsTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * An output that will be called before the view is rendered for the current month.\n   * If you add the `cssClass` property to a day in the body it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender: EventEmitter<\n    CalendarMonthViewBeforeRenderEvent\n  > = new EventEmitter();\n\n  /**\n   * Called when the day cell is clicked\n   */\n  @Output()\n  dayClicked: EventEmitter<{ day: MonthViewDay }> = new EventEmitter<{\n    day: MonthViewDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is dragged and dropped\n   */\n  @Output()\n  eventTimesChanged: EventEmitter<\n    CalendarEventTimesChangedEvent\n  > = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * @hidden\n   */\n  columnHeaders: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: MonthView;\n\n  /**\n   * @hidden\n   */\n  openRowIndex: number;\n\n  /**\n   * @hidden\n   */\n  openDay: MonthViewDay;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByDate = (index: number, day: MonthViewDay) => day.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays ||\n      changes.weekendDays\n    ) {\n      this.refreshBody();\n    }\n\n    if (\n      changes.activeDayIsOpen ||\n      changes.viewDate ||\n      changes.events ||\n      changes.excludeDays\n    ) {\n      this.checkActiveDayIsOpen();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  toggleDayHighlight(event: CalendarEvent, isHighlighted: boolean): void {\n    this.view.days.forEach(day => {\n      if (isHighlighted && day.events.indexOf(event) > -1) {\n        day.backgroundColor = event.color.secondary;\n      } else {\n        delete day.backgroundColor;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  eventDropped(day: MonthViewDay, event: CalendarEvent): void {\n    const year: number = getYear(day.date);\n    const month: number = getMonth(day.date);\n    const date: number = getDate(day.date);\n    const newStart: Date = setDate(\n      setMonth(setYear(event.start, year), month),\n      date\n    );\n    let newEnd: Date;\n    if (event.end) {\n      const secondsDiff: number = differenceInSeconds(newStart, event.start);\n      newEnd = addSeconds(event.end, secondsDiff);\n    }\n    this.eventTimesChanged.emit({ event, newStart, newEnd });\n  }\n\n  /**\n   * @hidden\n   */\n  handleDayClick(clickEvent: any, day: MonthViewDay) {\n    // when using hammerjs, stopPropagation doesn't work. See https://github.com/mattlewis92/angular-calendar/issues/318\n    if (!clickEvent.target.classList.contains('cal-event')) {\n      this.dayClicked.emit({ day });\n    }\n  }\n\n  private refreshHeader(): void {\n    this.columnHeaders = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getMonthView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private checkActiveDayIsOpen(): void {\n    if (this.activeDayIsOpen === true) {\n      this.openDay = this.view.days.find(day =>\n        isSameDay(day.date, this.viewDate)\n      );\n      const index: number = this.view.days.indexOf(this.openDay);\n      this.openRowIndex =\n        Math.floor(index / this.view.totalDaysVisibleInWeek) *\n        this.view.totalDaysVisibleInWeek;\n    } else {\n      this.openRowIndex = null;\n      this.openDay = null;\n    }\n  }\n\n  private refreshAll(): void {\n    this.columnHeaders = null;\n    this.view = null;\n    this.refreshHeader();\n    this.refreshBody();\n    this.checkActiveDayIsOpen();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.columnHeaders && this.view) {\n      this.beforeViewRender.emit({\n        header: this.columnHeaders,\n        body: this.view.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import { Component, Input, TemplateRef } from '@angular/core';\nimport { WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\">\n      <div class=\"cal-cell-row cal-header\">\n        <div\n          class=\"cal-cell\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [ngClass]=\"day.cssClass\">\n          {{ day.date | calendarDate:'monthViewColumnHeader':locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale}\">\n    </ng-template>\n  `\n})\nexport class CalendarMonthViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { MonthViewDay, CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-month-cell',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-day=\"day\"\n      let-openDay=\"openDay\"\n      let-locale=\"locale\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-highlightDay=\"highlightDay\"\n      let-unhighlightDay=\"unhighlightDay\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div class=\"cal-cell-top\">\n        <span class=\"cal-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"cal-day-number\">{{ day.date | calendarDate:'monthViewDayNumber':locale }}</span>\n      </div>\n      <div class=\"cal-events\" *ngIf=\"day.events.length > 0\">\n        <div\n          class=\"cal-event\"\n          *ngFor=\"let event of day.events; trackBy:trackByEventId\"\n          [style.backgroundColor]=\"event.color.primary\"\n          [ngClass]=\"event?.cssClass\"\n          (mouseenter)=\"highlightDay.emit({event: event})\"\n          (mouseleave)=\"unhighlightDay.emit({event: event})\"\n          [mwlCalendarTooltip]=\"event.title | calendarEventTitle:'monthTooltip':event\"\n          [tooltipPlacement]=\"tooltipPlacement\"\n          [tooltipEvent]=\"event\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipAppendToBody]=\"tooltipAppendToBody\"\n          mwlDraggable\n          [dropData]=\"{event: event}\"\n          [dragAxis]=\"{x: event.draggable, y: event.draggable}\"\n          (mwlClick)=\"eventClicked.emit({ event: event })\">\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        openDay: openDay,\n        locale: locale,\n        tooltipPlacement: tooltipPlacement,\n        highlightDay: highlightDay,\n        unhighlightDay: unhighlightDay,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `,\n  host: {\n    class: 'cal-cell cal-day-cell',\n    '[class.cal-past]': 'day.isPast',\n    '[class.cal-today]': 'day.isToday',\n    '[class.cal-future]': 'day.isFuture',\n    '[class.cal-weekend]': 'day.isWeekend',\n    '[class.cal-in-month]': 'day.inMonth',\n    '[class.cal-out-month]': '!day.inMonth',\n    '[class.cal-has-events]': 'day.events.length > 0',\n    '[class.cal-open]': 'day === openDay',\n    '[style.backgroundColor]': 'day.backgroundColor'\n  }\n})\nexport class CalendarMonthCellComponent {\n  @Input() day: MonthViewDay;\n\n  @Input() openDay: MonthViewDay;\n\n  @Input() locale: string;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() highlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output() unhighlightDay: EventEmitter<any> = new EventEmitter();\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, transition, animate } from '@angular/animations';\nimport { CalendarEvent } from 'calendar-utils';\nimport { trackByEventId } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-open-day-events',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-events=\"events\"\n      let-eventClicked=\"eventClicked\">\n      <div\n        *ngFor=\"let event of events; trackBy:trackByEventId\"\n        [ngClass]=\"event?.cssClass\"\n        mwlDraggable\n        [dropData]=\"{event: event}\"\n        [dragAxis]=\"{x: event.draggable, y: event.draggable}\">\n        <span\n          class=\"cal-event\"\n          [style.backgroundColor]=\"event.color.primary\">\n        </span>\n        <mwl-calendar-event-title\n          [event]=\"event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"month\"\n          (mwlClick)=\"eventClicked.emit({event: event})\">\n        </mwl-calendar-event-title>\n        <mwl-calendar-event-actions [event]=\"event\"></mwl-calendar-event-actions>\n      </div>\n    </ng-template>\n    <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\n      <ng-template\n        [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{\n          events: events,\n          eventClicked: eventClicked\n        }\">\n      </ng-template>\n    </div>\n  `,\n  animations: [\n    trigger('collapse', [\n      transition('void => *', [\n        style({ height: 0, overflow: 'hidden' }),\n        animate('150ms', style({ height: '*' }))\n      ]),\n      transition('* => void', [\n        style({ height: '*', overflow: 'hidden' }),\n        animate('150ms', style({ height: 0 }))\n      ])\n    ])\n  ]\n})\nexport class CalendarOpenDayEventsComponent {\n  @Input() isOpen: boolean = false;\n\n  @Input() events: CalendarEvent[];\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  trackByEventId = trackByEventId;\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarMonthViewComponent } from './calendar-month-view.component';\nimport { CalendarMonthViewHeaderComponent } from './calendar-month-view-header.component';\nimport { CalendarMonthCellComponent } from './calendar-month-cell.component';\nimport { CalendarOpenDayEventsComponent } from './calendar-open-day-events.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarMonthViewComponent,\n  CalendarMonthViewBeforeRenderEvent\n} from './calendar-month-view.component';\nexport { MonthViewDay as CalendarMonthViewDay } from 'calendar-utils';\n\n@NgModule({\n  imports: [CommonModule, DragAndDropModule, CalendarCommonModule],\n  declarations: [\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ],\n  exports: [\n    DragAndDropModule,\n    CalendarMonthViewComponent,\n    CalendarMonthCellComponent,\n    CalendarOpenDayEventsComponent,\n    CalendarMonthViewHeaderComponent\n  ]\n})\nexport class CalendarMonthModule {}\n",
    "import { isInside } from './util';\n\nexport class CalendarDragHelper {\n  startPosition: ClientRect;\n\n  constructor(\n    private dragContainerElement: HTMLElement,\n    draggableElement: HTMLElement\n  ) {\n    this.startPosition = draggableElement.getBoundingClientRect();\n  }\n\n  validateDrag({ x, y }: { x: number; y: number }): boolean {\n    const newRect: ClientRect = Object.assign({}, this.startPosition, {\n      left: this.startPosition.left + x,\n      right: this.startPosition.right + x,\n      top: this.startPosition.top + y,\n      bottom: this.startPosition.bottom + y\n    });\n\n    return isInside(this.dragContainerElement.getBoundingClientRect(), newRect);\n  }\n}\n",
    "import { isInside } from './util';\n\nexport class CalendarResizeHelper {\n  constructor(\n    private resizeContainerElement: HTMLElement,\n    private minWidth?: number\n  ) {}\n\n  validateResize({ rectangle }: { rectangle: ClientRect }): boolean {\n    if (this.minWidth && rectangle.width < this.minWidth) {\n      return false;\n    }\n\n    return isInside(\n      this.resizeContainerElement.getBoundingClientRect(),\n      rectangle\n    );\n  }\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  LOCALE_ID,\n  Inject,\n  TemplateRef\n} from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport {\n  WeekDay,\n  CalendarEvent,\n  WeekViewEvent,\n  WeekView,\n  ViewPeriod\n} from 'calendar-utils';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addDays from 'date-fns/add_days/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByIndex } from '../common/util';\n\nexport interface WeekViewEventResize {\n  originalOffset: number;\n  originalSpan: number;\n  edge: string;\n}\n\nexport interface CalendarWeekViewBeforeRenderEvent {\n  header: WeekDay[];\n  period: ViewPeriod;\n}\n\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * <mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-week-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-week-view',\n  template: `\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <mwl-calendar-week-view-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n        (eventDropped)=\"eventTimesChanged.emit($event)\">\n      </mwl-calendar-week-view-header>\n      <div *ngFor=\"let eventRow of view.eventRows; trackBy:trackByIndex\" #eventRowContainer class=\"cal-events-row\">\n        <div\n          *ngFor=\"let weekEvent of eventRow.row; trackBy:trackByEventId\"\n          #event\n          class=\"cal-event-container\"\n          [class.cal-draggable]=\"weekEvent.event.draggable\"\n          [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n          [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n          [ngClass]=\"weekEvent.event?.cssClass\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\"\n          mwlResizable\n          [resizeEdges]=\"{left: weekEvent.event?.resizable?.beforeStart, right: weekEvent.event?.resizable?.afterEnd}\"\n          [resizeSnapGrid]=\"{left: dayColumnWidth, right: dayColumnWidth}\"\n          [validateResize]=\"validateResize\"\n          (resizeStart)=\"resizeStarted(weekViewContainer, weekEvent, $event)\"\n          (resizing)=\"resizing(weekEvent, $event, dayColumnWidth)\"\n          (resizeEnd)=\"resizeEnded(weekEvent)\"\n          mwlDraggable\n          [dragAxis]=\"{x: weekEvent.event.draggable && currentResizes.size === 0, y: false}\"\n          [dragSnapGrid]=\"{x: dayColumnWidth}\"\n          [validateDrag]=\"validateDrag\"\n          (dragPointerDown)=\"dragStart(weekViewContainer, event)\"\n          (dragEnd)=\"eventDragged(weekEvent, $event.x, dayColumnWidth)\">\n          <mwl-calendar-week-view-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPlacement]=\"tooltipPlacement\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipAppendToBody]=\"tooltipAppendToBody\"\n            [customTemplate]=\"eventTemplate\"\n            [eventTitleTemplate]=\"eventTitleTemplate\"\n            (eventClicked)=\"eventClicked.emit({event: weekEvent.event})\">\n          </mwl-calendar-week-view-event>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarWeekViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n   */\n  @Input() excludeDays: number[] = [];\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'bottom';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * The start number of the week\n   */\n  @Input() weekStartsOn: number;\n\n  /**\n   * A custom template to use to replace the header\n   */\n  @Input() headerTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for week view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * The precision to display events.\n   * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n   */\n  @Input() precision: 'days' | 'minutes' = 'days';\n\n  /**\n   * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n   */\n  @Input() weekendDays: number[];\n\n  /**\n   * Called when a header week day is clicked. Adding a `cssClass` property on `$event.day` will add that class to the header element\n   */\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  /**\n   * Called when the event title is clicked\n   */\n  @Output()\n  eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged: EventEmitter<\n    CalendarEventTimesChangedEvent\n  > = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current week.\n   * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarWeekViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  days: WeekDay[];\n\n  /**\n   * @hidden\n   */\n  view: WeekView;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<WeekViewEvent, WeekViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  dayColumnWidth: number;\n\n  /**\n   * @hidden\n   */\n  trackByIndex = trackByIndex;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = (index: number, weekEvent: WeekViewEvent) =>\n    weekEvent.event.id ? weekEvent.event.id : weekEvent;\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n      this.refreshHeader();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (changes.events || changes.viewDate || changes.excludeDays) {\n      this.refreshBody();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeStarted(\n    weekViewContainer: HTMLElement,\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent\n  ): void {\n    this.currentResizes.set(weekEvent, {\n      originalOffset: weekEvent.offset,\n      originalSpan: weekEvent.span,\n      edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n    });\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      weekViewContainer,\n      this.dayColumnWidth\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  /**\n   * @hidden\n   */\n  resizing(\n    weekEvent: WeekViewEvent,\n    resizeEvent: ResizeEvent,\n    dayWidth: number\n  ): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    if (resizeEvent.edges.left) {\n      const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);\n      weekEvent.offset = currentResize.originalOffset + diff;\n      weekEvent.span = currentResize.originalSpan - diff;\n    } else if (resizeEvent.edges.right) {\n      const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);\n      weekEvent.span = currentResize.originalSpan + diff;\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  resizeEnded(weekEvent: WeekViewEvent): void {\n    const currentResize: WeekViewEventResize = this.currentResizes.get(\n      weekEvent\n    );\n\n    let daysDiff: number;\n    if (currentResize.edge === 'left') {\n      daysDiff = weekEvent.offset - currentResize.originalOffset;\n    } else {\n      daysDiff = weekEvent.span - currentResize.originalSpan;\n    }\n\n    weekEvent.offset = currentResize.originalOffset;\n    weekEvent.span = currentResize.originalSpan;\n\n    let newStart: Date = weekEvent.event.start;\n    let newEnd: Date = weekEvent.event.end;\n    if (currentResize.edge === 'left') {\n      newStart = addDays(newStart, daysDiff);\n    } else if (newEnd) {\n      newEnd = addDays(newEnd, daysDiff);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n    this.currentResizes.delete(weekEvent);\n  }\n\n  /**\n   * @hidden\n   */\n  eventDragged(\n    weekEvent: WeekViewEvent,\n    draggedByPx: number,\n    dayWidth: number\n  ): void {\n    const daysDragged: number = draggedByPx / dayWidth;\n    const newStart: Date = addDays(weekEvent.event.start, daysDragged);\n    let newEnd: Date;\n    if (weekEvent.event.end) {\n      newEnd = addDays(weekEvent.event.end, daysDragged);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: weekEvent.event });\n  }\n\n  /**\n   * @hidden\n   */\n  getDayColumnWidth(eventRowContainer: HTMLElement): number {\n    return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n  }\n\n  /**\n   * @hidden\n   */\n  dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {\n    this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      weekViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  private refreshHeader(): void {\n    this.days = this.utils.getWeekViewHeader({\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      weekendDays: this.weekendDays\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshBody(): void {\n    this.view = this.utils.getWeekView({\n      events: this.events,\n      viewDate: this.viewDate,\n      weekStartsOn: this.weekStartsOn,\n      excluded: this.excludeDays,\n      precision: this.precision,\n      absolutePositionedEvents: true\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHeader();\n    this.refreshBody();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.days && this.view) {\n      this.beforeViewRender.emit({\n        header: this.days,\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { CalendarEvent, WeekDay } from 'calendar-utils';\nimport { trackByWeekDayHeaderDate } from '../common/util';\n\n@Component({\n  selector: 'mwl-calendar-week-view-header',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-days=\"days\"\n      let-locale=\"locale\"\n      let-dayHeaderClicked=\"dayHeaderClicked\"\n      let-eventDropped=\"eventDropped\">\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days; trackBy:trackByWeekDayHeaderDate\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          [ngClass]=\"day.cssClass\"\n          (mwlClick)=\"dayHeaderClicked.emit({day: day})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n          <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayHeaderClicked: dayHeaderClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewHeaderComponent {\n  @Input() days: WeekDay[];\n\n  @Input() locale: string;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output()\n  dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n    day: WeekDay;\n  }>();\n\n  @Output()\n  eventDropped: EventEmitter<{\n    event: CalendarEvent;\n    newStart: Date;\n  }> = new EventEmitter<{ event: CalendarEvent; newStart: Date }>();\n\n  trackByWeekDayHeaderDate = trackByWeekDayHeaderDate;\n}\n",
    "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  TemplateRef\n} from '@angular/core';\nimport { WeekViewEvent } from 'calendar-utils';\n\n@Component({\n  selector: 'mwl-calendar-week-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div\n        class=\"cal-event\"\n        [style.backgroundColor]=\"weekEvent.event.color.secondary\"\n        [mwlCalendarTooltip]=\"weekEvent.event.title | calendarEventTitle:'weekTooltip':weekEvent.event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\">\n        <mwl-calendar-event-actions [event]=\"weekEvent.event\"></mwl-calendar-event-actions>\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"week\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekViewEventComponent {\n  @Input() weekEvent: WeekViewEvent;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n",
    "import {\n  Component,\n  Input,\n  OnChanges,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  LOCALE_ID,\n  Inject,\n  OnInit,\n  OnDestroy,\n  TemplateRef\n} from '@angular/core';\nimport {\n  CalendarEvent,\n  DayView,\n  DayViewHour,\n  DayViewHourSegment,\n  DayViewEvent,\n  ViewPeriod\n} from 'calendar-utils';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeEvent } from 'angular-resizable-element';\nimport addMinutes from 'date-fns/add_minutes/index';\nimport { CalendarDragHelper } from '../common/calendar-drag-helper.provider';\nimport { CalendarResizeHelper } from '../common/calendar-resize-helper.provider';\nimport { CalendarEventTimesChangedEvent } from '../common/calendar-event-times-changed-event.interface';\nimport { CalendarUtils } from '../common/calendar-utils.provider';\nimport { validateEvents, trackByEventId } from '../common/util';\n\nexport interface CalendarDayViewBeforeRenderEvent {\n  body: {\n    hourGrid: DayViewHour[];\n  };\n  period: ViewPeriod;\n}\n\n/**\n * @hidden\n */\nconst MINUTES_IN_HOUR: number = 60;\n\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n  originalTop: number;\n  originalHeight: number;\n  edge: string;\n}\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n  selector: 'mwl-calendar-day-view',\n  template: `\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <mwl-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents; trackBy:trackByEventId\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        [eventTitleTemplate]=\"eventTitleTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </mwl-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events; trackBy:trackByDayEvent\"\n            class=\"cal-event-container\"\n            [class.cal-draggable]=\"dayEvent.event.draggable\"\n            [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n            [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n            [ngClass]=\"dayEvent.event.cssClass\"\n            mwlResizable\n            [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n            [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n            [validateResize]=\"validateResize\"\n            (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n            (resizing)=\"resizing(dayEvent, $event)\"\n            (resizeEnd)=\"resizeEnded(dayEvent)\"\n            mwlDraggable\n            [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n            [dragSnapGrid]=\"{y: eventSnapSize}\"\n            [validateDrag]=\"validateDrag\"\n            (dragPointerDown)=\"dragStart(event, dayViewContainer)\"\n            (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <mwl-calendar-day-view-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPlacement]=\"tooltipPlacement\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipAppendToBody]=\"tooltipAppendToBody\"\n              [customTemplate]=\"eventTemplate\"\n              [eventTitleTemplate]=\"eventTitleTemplate\"\n              (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n            </mwl-calendar-day-view-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours; trackBy:trackByHour\" [style.minWidth.px]=\"view?.width + 70\">\n          <mwl-calendar-day-view-hour-segment\n            *ngFor=\"let segment of hour.segments; trackBy:trackByHourSegment\"\n            [style.height.px]=\"hourSegmentHeight\"\n            [segment]=\"segment\"\n            [segmentHeight]=\"hourSegmentHeight\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (mwlClick)=\"hourSegmentClicked.emit({date: segment.date})\"\n            [class.cal-drag-over]=\"segment.dragOver\"\n            mwlDroppable\n            (dragEnter)=\"segment.dragOver = true\"\n            (dragLeave)=\"segment.dragOver = false\"\n            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n          </mwl-calendar-day-view-hour-segment>\n        </div>\n      </div>\n    </div>\n  `\n})\nexport class CalendarDayViewComponent implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The current view date\n   */\n  @Input() viewDate: Date;\n\n  /**\n   * An array of events to display on view\n   * The schema is available here: https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n   */\n  @Input() events: CalendarEvent[] = [];\n\n  /**\n   * The number of segments in an hour. Must be <= 6\n   */\n  @Input() hourSegments: number = 2;\n\n  /**\n   * The height in pixels of each hour segment\n   */\n  @Input() hourSegmentHeight: number = 30;\n\n  /**\n   * The day start hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayStartHour: number = 0;\n\n  /**\n   * The day start minutes. Must be 0-59\n   */\n  @Input() dayStartMinute: number = 0;\n\n  /**\n   * The day end hours in 24 hour time. Must be 0-23\n   */\n  @Input() dayEndHour: number = 23;\n\n  /**\n   * The day end minutes. Must be 0-59\n   */\n  @Input() dayEndMinute: number = 59;\n\n  /**\n   * The width in pixels of each event on the view\n   */\n  @Input() eventWidth: number = 150;\n\n  /**\n   * An observable that when emitted on will re-render the current view\n   */\n  @Input() refresh: Subject<any>;\n\n  /**\n   * The locale used to format dates\n   */\n  @Input() locale: string;\n\n  /**\n   * The grid size to snap resizing and dragging of events to\n   */\n  @Input() eventSnapSize: number = this.hourSegmentHeight;\n\n  /**\n   * The placement of the event tooltip\n   */\n  @Input() tooltipPlacement: string = 'top';\n\n  /**\n   * A custom template to use for the event tooltips\n   */\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  /**\n   * Whether to append tooltips to the body or next to the trigger element\n   */\n  @Input() tooltipAppendToBody: boolean = true;\n\n  /**\n   * A custom template to use to replace the hour segment\n   */\n  @Input() hourSegmentTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for all day events\n   */\n  @Input() allDayEventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for day view events\n   */\n  @Input() eventTemplate: TemplateRef<any>;\n\n  /**\n   * A custom template to use for event titles\n   */\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  /**\n   * Called when an event title is clicked\n   */\n  @Output()\n  eventClicked = new EventEmitter<{\n    event: CalendarEvent;\n  }>();\n\n  /**\n   * Called when an hour segment is clicked\n   */\n  @Output()\n  hourSegmentClicked = new EventEmitter<{\n    date: Date;\n  }>();\n\n  /**\n   * Called when an event is resized or dragged and dropped\n   */\n  @Output()\n  eventTimesChanged = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n  /**\n   * An output that will be called before the view is rendered for the current day.\n   * If you add the `cssClass` property to an hour grid segment it will add that class to the hour segment in the template\n   */\n  @Output()\n  beforeViewRender = new EventEmitter<CalendarDayViewBeforeRenderEvent>();\n\n  /**\n   * @hidden\n   */\n  hours: DayViewHour[] = [];\n\n  /**\n   * @hidden\n   */\n  view: DayView;\n\n  /**\n   * @hidden\n   */\n  width: number = 0;\n\n  /**\n   * @hidden\n   */\n  refreshSubscription: Subscription;\n\n  /**\n   * @hidden\n   */\n  currentResizes: Map<DayViewEvent, DayViewEventResize> = new Map();\n\n  /**\n   * @hidden\n   */\n  validateDrag: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  validateResize: (args: any) => boolean;\n\n  /**\n   * @hidden\n   */\n  trackByEventId = trackByEventId;\n\n  /**\n   * @hidden\n   */\n  trackByDayEvent = (index: number, dayEvent: DayViewEvent) =>\n    dayEvent.event.id ? dayEvent.event.id : dayEvent.event;\n\n  /**\n   * @hidden\n   */\n  trackByHour = (index: number, hour: DayViewHour) =>\n    hour.segments[0].date.toISOString();\n\n  /**\n   * @hidden\n   */\n  trackByHourSegment = (index: number, segment: DayViewHourSegment) =>\n    segment.date.toISOString();\n\n  /**\n   * @hidden\n   */\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private utils: CalendarUtils,\n    @Inject(LOCALE_ID) locale: string\n  ) {\n    this.locale = locale;\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnInit(): void {\n    if (this.refresh) {\n      this.refreshSubscription = this.refresh.subscribe(() => {\n        this.refreshAll();\n        this.cdr.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnDestroy(): void {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  ngOnChanges(changes: any): void {\n    if (\n      changes.viewDate ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute\n    ) {\n      this.refreshHourGrid();\n    }\n\n    if (changes.events) {\n      validateEvents(this.events);\n    }\n\n    if (\n      changes.viewDate ||\n      changes.events ||\n      changes.dayStartHour ||\n      changes.dayStartMinute ||\n      changes.dayEndHour ||\n      changes.dayEndMinute ||\n      changes.eventWidth\n    ) {\n      this.refreshView();\n    }\n  }\n\n  eventDropped(\n    dropEvent: { dropData?: { event?: CalendarEvent } },\n    segment: DayViewHourSegment\n  ): void {\n    if (dropEvent.dropData && dropEvent.dropData.event) {\n      this.eventTimesChanged.emit({\n        event: dropEvent.dropData.event,\n        newStart: segment.date\n      });\n    }\n  }\n\n  resizeStarted(\n    event: DayViewEvent,\n    resizeEvent: ResizeEvent,\n    dayViewContainer: HTMLElement\n  ): void {\n    this.currentResizes.set(event, {\n      originalTop: event.top,\n      originalHeight: event.height,\n      edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n    });\n    const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n      dayViewContainer\n    );\n    this.validateResize = ({ rectangle }) =>\n      resizeHelper.validateResize({ rectangle });\n    this.cdr.markForCheck();\n  }\n\n  resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(event);\n    if (resizeEvent.edges.top) {\n      event.top = currentResize.originalTop + +resizeEvent.edges.top;\n      event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n    } else if (resizeEvent.edges.bottom) {\n      event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n    }\n  }\n\n  resizeEnded(dayEvent: DayViewEvent): void {\n    const currentResize: DayViewEventResize = this.currentResizes.get(dayEvent);\n\n    let pixelsMoved: number;\n    if (currentResize.edge === 'top') {\n      pixelsMoved = dayEvent.top - currentResize.originalTop;\n    } else {\n      pixelsMoved = dayEvent.height - currentResize.originalHeight;\n    }\n\n    dayEvent.top = currentResize.originalTop;\n    dayEvent.height = currentResize.originalHeight;\n\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;\n    let newStart: Date = dayEvent.event.start;\n    let newEnd: Date = dayEvent.event.end;\n    if (currentResize.edge === 'top') {\n      newStart = addMinutes(newStart, minutesMoved);\n    } else if (newEnd) {\n      newEnd = addMinutes(newEnd, minutesMoved);\n    }\n\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n    this.currentResizes.delete(dayEvent);\n  }\n\n  dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {\n    const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n      dayViewContainer,\n      event\n    );\n    this.validateDrag = ({ x, y }) =>\n      this.currentResizes.size === 0 && dragHelper.validateDrag({ x, y });\n    this.cdr.markForCheck();\n  }\n\n  eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {\n    const pixelAmountInMinutes: number =\n      MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n    const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;\n    const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);\n    let newEnd: Date;\n    if (dayEvent.event.end) {\n      newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n    }\n    this.eventTimesChanged.emit({ newStart, newEnd, event: dayEvent.event });\n  }\n\n  private refreshHourGrid(): void {\n    this.hours = this.utils.getDayViewHourGrid({\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      }\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshView(): void {\n    this.view = this.utils.getDayView({\n      events: this.events,\n      viewDate: this.viewDate,\n      hourSegments: this.hourSegments,\n      dayStart: {\n        hour: this.dayStartHour,\n        minute: this.dayStartMinute\n      },\n      dayEnd: {\n        hour: this.dayEndHour,\n        minute: this.dayEndMinute\n      },\n      eventWidth: this.eventWidth,\n      segmentHeight: this.hourSegmentHeight\n    });\n    this.emitBeforeViewRender();\n  }\n\n  private refreshAll(): void {\n    this.refreshHourGrid();\n    this.refreshView();\n  }\n\n  private emitBeforeViewRender(): void {\n    if (this.hours && this.view) {\n      this.beforeViewRender.emit({\n        body: {\n          hourGrid: this.hours\n        },\n        period: this.view.period\n      });\n    }\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableModule } from 'angular-resizable-element';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport { CalendarWeekViewComponent } from './calendar-week-view.component';\nimport { CalendarWeekViewHeaderComponent } from './calendar-week-view-header.component';\nimport { CalendarWeekViewEventComponent } from './calendar-week-view-event.component';\nimport { CalendarCommonModule } from '../common/calendar-common.module';\n\nexport {\n  CalendarWeekViewComponent,\n  CalendarWeekViewBeforeRenderEvent\n} from './calendar-week-view.component';\nexport {\n  WeekViewEvent as CalendarWeekViewEvent,\n  WeekViewEventRow as CalendarWeekViewEventRow,\n  GetWeekViewArgs as CalendarGetWeekViewArgs\n} from 'calendar-utils';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizableModule,\n    DragAndDropModule,\n    CalendarCommonModule\n  ],\n  declarations: [\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ],\n  exports: [\n    ResizableModule,\n    DragAndDropModule,\n    CalendarWeekViewComponent,\n    CalendarWeekViewHeaderComponent,\n    CalendarWeekViewEventComponent\n  ]\n})\nexport class CalendarWeekModule {}\n"
  ],
  "names": [
    "validateEvents$1",
    "events",
    "args",
    "_i",
    "arguments",
    "console",
    "warn",
    "apply",
    "__spread",
    "inner",
    "left",
    "outer",
    "right",
    "bottom",
    "this",
    "trackByIndex",
    "CalendarEventTitleComponent",
    "type",
    "Component",
    "selector",
    "template",
    "customTemplate",
    "Input",
    "CalendarTooltipDirective",
    "elementRef",
    "injector",
    "renderer",
    "componentFactoryResolver",
    "viewContainerRef",
    "document",
    "placement",
    "prototype",
    "ngOnDestroy",
    "hide",
    "tooltipRef",
    "createComponent",
    "tooltipFactory",
    "instance",
    "contents",
    "body",
    "appendChild",
    "location",
    "nativeElement",
    "requestAnimationFrame",
    "_this",
    "positionTooltip",
    "remove",
    "indexOf",
    "hostView",
    "targetPosition",
    "positioning",
    "positionElements",
    "children",
    "appendToBody",
    "elm",
    "decorators",
    "Directive",
    "Injector",
    "Renderer2",
    "ComponentFactoryResolver",
    "propDecorators",
    "event",
    "day",
    "subDays",
    "CalendarPreviousViewDirective",
    "view",
    "viewDate",
    "viewDateChange",
    "Output",
    "addDays",
    "CalendarNextViewDirective",
    "onClick",
    "HostListener",
    "CalendarAngularDateFormatter",
    "monthViewColumnHeader",
    "_a",
    "DatePipe",
    "locale",
    "transform",
    "date",
    "year",
    "getISOWeek",
    "dayViewHour",
    "dayViewTitle",
    "CalendarDateFormatter",
    "CalendarDatePipe",
    "method",
    "CalendarEventTitleFormatter",
    "month",
    "title",
    "monthTooltip",
    "week",
    "weekTooltip",
    "dayTooltip",
    "CalendarEventTitlePipe",
    "calendarEventTitle",
    "ClickDirective",
    "click",
    "EventEmitter",
    "eventName",
    "window",
    "removeListener",
    "CalendarUtils",
    "getDayView",
    "CalendarMomentDateFormatter",
    "monthViewDayNumber",
    "format",
    "weekday",
    "CalendarCommonModule",
    "forRoot",
    "config",
    "ngModule",
    "providers",
    "DraggableHelper",
    "eventTitleFormatter",
    "dateFormatter",
    "utils",
    "CalendarTooltipWindowComponent",
    "entryComponents",
    "cdr",
    "tooltipPlacement",
    "beforeViewRender",
    "eventTimesChanged",
    "trackByDate",
    "index",
    "toISOString",
    "CalendarMonthViewComponent",
    "ngOnInit",
    "changes",
    "excludeDays",
    "weekendDays",
    "refreshBody",
    "refreshSubscription",
    "unsubscribe",
    "isHighlighted",
    "backgroundColor",
    "eventDropped",
    "getYear",
    "getMonth",
    "secondsDiff",
    "differenceInSeconds",
    "newStart",
    "start",
    "newEnd",
    "addSeconds",
    "end",
    "emit",
    "clickEvent",
    "target",
    "classList",
    "contains",
    "dayClicked",
    "refreshHeader",
    "columnHeaders",
    "getWeekViewHeader",
    "weekStartsOn",
    "excluded",
    "getMonthView",
    "emitBeforeViewRender",
    "checkActiveDayIsOpen",
    "openRowIndex",
    "Math",
    "floor",
    "totalDaysVisibleInWeek",
    "undefined",
    "Inject",
    "LOCALE_ID",
    "activeDayIsOpen",
    "refresh",
    "tooltipTemplate",
    "tooltipAppendToBody",
    "headerTemplate",
    "cellTemplate",
    "openDayEventsTemplate",
    "eventTitleTemplate",
    "eventClicked",
    "CalendarMonthViewHeaderComponent",
    "days",
    "[class.cal-past]",
    "[class.cal-today]",
    "[class.cal-has-events]",
    "[class.cal-open]",
    "[style.backgroundColor]",
    "imports",
    "CommonModule",
    "DragAndDropModule",
    "declarations",
    "CalendarMonthCellComponent",
    "CalendarOpenDayEventsComponent",
    "exports",
    "CalendarDragHelper",
    "dragContainerElement",
    "draggableElement",
    "x",
    "y",
    "newRect",
    "Object",
    "assign",
    "startPosition",
    "isInside",
    "getBoundingClientRect",
    "precision",
    "trackByEventId",
    "weekEvent",
    "id",
    "CalendarWeekViewComponent",
    "ngOnChanges",
    "originalSpan",
    "span",
    "resizeHelper",
    "validateResize",
    "rectangle",
    "markForCheck",
    "resizing",
    "resizeEvent",
    "dayWidth",
    "offset",
    "currentResize",
    "originalOffset",
    "diff",
    "round",
    "edges",
    "resizeEnded",
    "daysDiff",
    "edge",
    "daysDragged",
    "dragStart",
    "weekViewContainer",
    "dayColumnWidth",
    "getDayColumnWidth",
    "dragHelper",
    "getWeekView",
    "refreshAll",
    "header",
    "ctorParameters",
    "ChangeDetectorRef",
    "CalendarWeekViewHeaderComponent",
    "dayHeaderClicked",
    "CalendarWeekViewEventComponent",
    "CalendarWeekModule",
    "NgModule",
    "ResizableModule",
    "CalendarDayViewComponent",
    "hourSegments",
    "hourSegmentHeight",
    "dayStartHour",
    "dayStartMinute",
    "eventWidth",
    "trackByDayEvent",
    "dayEvent",
    "refreshView",
    "resizeStarted",
    "dayViewContainer",
    "currentResizes",
    "set",
    "originalTop",
    "top",
    "originalHeight",
    "height",
    "CalendarResizeHelper",
    "delete",
    "eventDragged",
    "draggedInPixels",
    "dayStart",
    "hour",
    "dayEndHour",
    "segmentHeight",
    "refreshHourGrid",
    "period",
    "dayEndMinute",
    "hourSegmentTemplate",
    "allDayEventTemplate",
    "eventTemplate",
    "hourSegmentClicked",
    "CalendarAllDayEventComponent",
    "CalendarDayViewHourSegmentComponent",
    "CalendarDayViewEventComponent",
    "CalendarDayModule",
    "CalendarModule",
    "CalendarMonthModule"
  ],
  "mappings": "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"
}
