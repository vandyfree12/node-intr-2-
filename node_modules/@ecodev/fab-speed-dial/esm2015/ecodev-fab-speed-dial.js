import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Injector, Input, NgModule, Output, Renderer2, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButton } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const Z_INDEX_ITEM = 23;
class EcoFabSpeedDialActionsComponent {
    /**
     * @param {?} injector
     * @param {?} renderer
     */
    constructor(injector, renderer) {
        this.renderer = renderer;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._buttons.changes.subscribe(() => {
            this.initButtonStates();
            this._parent.setActionsVisibility();
        });
        this.initButtonStates();
    }
    /**
     * @return {?}
     */
    initButtonStates() {
        this._buttons.toArray().forEach((button, i) => {
            this.renderer.addClass(button._getHostElement(), 'eco-fab-action-item');
            this.changeElementStyle(button._getHostElement(), 'z-index', '' + (Z_INDEX_ITEM - i));
        });
    }
    /**
     * @return {?}
     */
    show() {
        if (this._buttons) {
            this._buttons.toArray().forEach((button, i) => {
                let /** @type {?} */ transitionDelay = 0;
                let /** @type {?} */ transform;
                if (this._parent.animationMode === 'scale') {
                    // Incremental transition delay of 65ms for each action button
                    transitionDelay = 3 + (65 * i);
                    transform = 'scale(1)';
                }
                else {
                    transform = this.getTranslateFunction('0');
                }
                this.changeElementStyle(button._getHostElement(), 'transition-delay', transitionDelay + 'ms');
                this.changeElementStyle(button._getHostElement(), 'opacity', '1');
                this.changeElementStyle(button._getHostElement(), 'transform', transform);
            });
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (this._buttons) {
            this._buttons.toArray().forEach((button, i) => {
                let /** @type {?} */ opacity = '1';
                let /** @type {?} */ transitionDelay = 0;
                let /** @type {?} */ transform;
                if (this._parent.animationMode === 'scale') {
                    transitionDelay = 3 - (65 * i);
                    transform = 'scale(0)';
                    opacity = '0';
                }
                else {
                    transform = this.getTranslateFunction((55 * (i + 1) - (i * 5)) + 'px');
                }
                this.changeElementStyle(button._getHostElement(), 'transition-delay', transitionDelay + 'ms');
                this.changeElementStyle(button._getHostElement(), 'opacity', opacity);
                this.changeElementStyle(button._getHostElement(), 'transform', transform);
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    getTranslateFunction(value) {
        let /** @type {?} */ dir = this._parent.direction;
        let /** @type {?} */ translateFn = (dir === 'up' || dir === 'down') ? 'translateY' : 'translateX';
        let /** @type {?} */ sign = (dir === 'down' || dir === 'right') ? '-' : '';
        return translateFn + '(' + sign + value + ')';
    }
    /**
     * @param {?} elem
     * @param {?} style
     * @param {?} value
     * @return {?}
     */
    changeElementStyle(elem, style, value) {
        // FIXME - Find a way to create a "wrapper" around the action button(s) provided by the user, so we don't change it's style tag
        this.renderer.setStyle(elem, style, value);
    }
}
EcoFabSpeedDialActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial-actions',
                template: `
        <ng-content select="[mat-mini-fab]"></ng-content>`,
            },] },
];
/** @nocollapse */
EcoFabSpeedDialActionsComponent.ctorParameters = () => [
    { type: Injector, },
    { type: Renderer2, },
];
EcoFabSpeedDialActionsComponent.propDecorators = {
    "_buttons": [{ type: ContentChildren, args: [MatButton,] },],
};
class EcoFabSpeedDialComponent {
    /**
     * @param {?} elementRef
     * @param {?} renderer
     */
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.isInitialized = false;
        this._direction = 'up';
        this._open = false;
        this._animationMode = 'fling';
        /**
         * Whether this speed dial is fixed on screen (user cannot change it by clicking)
         */
        this.fixed = false;
        this.openChange = new EventEmitter();
    }
    /**
     * Whether this speed dial is opened
     * @return {?}
     */
    get open() {
        return this._open;
    }
    /**
     * @param {?} open
     * @return {?}
     */
    set open(open) {
        let /** @type {?} */ previousOpen = this._open;
        this._open = open;
        if (previousOpen !== this._open) {
            this.openChange.emit(this._open);
            if (this.isInitialized) {
                this.setActionsVisibility();
            }
        }
    }
    /**
     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'
     * @return {?}
     */
    get direction() {
        return this._direction;
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    set direction(direction) {
        let /** @type {?} */ previousDirection = this._direction;
        this._direction = direction;
        if (previousDirection !== this.direction) {
            this._setElementClass(previousDirection, false);
            this._setElementClass(this.direction, true);
            if (this.isInitialized) {
                this.setActionsVisibility();
            }
        }
    }
    /**
     * The animation mode to open the speed dial. Can be 'fling' or 'scale'
     * @return {?}
     */
    get animationMode() {
        return this._animationMode;
    }
    /**
     * @param {?} animationMode
     * @return {?}
     */
    set animationMode(animationMode) {
        let /** @type {?} */ previousAnimationMode = this._animationMode;
        this._animationMode = animationMode;
        if (previousAnimationMode !== this._animationMode) {
            this._setElementClass(previousAnimationMode, false);
            this._setElementClass(this.animationMode, true);
            if (this.isInitialized) {
                // To start another detect lifecycle and force the "close" on the action buttons
                Promise.resolve(null).then(() => this.open = false);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.isInitialized = true;
        this.setActionsVisibility();
        this._setElementClass(this.direction, true);
        this._setElementClass(this.animationMode, true);
    }
    /**
     * Toggle the open state of this speed dial
     * @return {?}
     */
    toggle() {
        this.open = !this.open;
    }
    /**
     * @return {?}
     */
    _onClick() {
        if (!this.fixed && this.open) {
            this.open = false;
        }
    }
    /**
     * @return {?}
     */
    setActionsVisibility() {
        if (this.open) {
            this._childActions.show();
        }
        else {
            this._childActions.hide();
        }
    }
    /**
     * @param {?} elemClass
     * @param {?} isAdd
     * @return {?}
     */
    _setElementClass(elemClass, isAdd) {
        const /** @type {?} */ finalClass = `eco-${elemClass}`;
        if (isAdd) {
            this.renderer.addClass(this.elementRef.nativeElement, finalClass);
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);
        }
    }
}
EcoFabSpeedDialComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial',
                template: `
        <div class="eco-fab-speed-dial-container">
            <ng-content select="eco-fab-speed-dial-trigger"></ng-content>
            <ng-content select="eco-fab-speed-dial-actions"></ng-content>
        </div>
    `,
                styles: [`eco-fab-speed-dial {
  display: inline-block; }
  eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg); }
  eco-fab-speed-dial .eco-fab-speed-dial-container {
    position: relative;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -ms-flex-align: center;
        align-items: center;
    z-index: 20; }
    eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger {
      pointer-events: auto;
      z-index: 24; }
      eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin {
        -webkit-transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1); }
    eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      height: auto; }
  eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
    display: block;
    opacity: 1;
    -webkit-transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);
    transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2); }
  eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);
    transition: all 0.3s cubic-bezier(0.55, 0, 0.55, 0.2);
    -webkit-transition-duration: .14286s;
    transition-duration: .14286s; }
  eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
        flex-direction: column; }
    eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger {
      -webkit-box-ordinal-group: 2;
      -ms-flex-order: 1;
          order: 1; }
    eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions {
      -webkit-box-orient: vertical;
      -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
      -webkit-box-ordinal-group: 3;
      -ms-flex-order: 2;
          order: 2; }
      eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
        margin-top: 10px; }
  eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
        flex-direction: column; }
    eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger {
      -webkit-box-ordinal-group: 3;
      -ms-flex-order: 2;
          order: 2; }
    eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions {
      -webkit-box-orient: vertical;
      -webkit-box-direction: reverse;
      -ms-flex-direction: column-reverse;
          flex-direction: column-reverse;
      -webkit-box-ordinal-group: 2;
      -ms-flex-order: 1;
          order: 1; }
      eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
        margin-bottom: 10px; }
  eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
        flex-direction: row; }
    eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger {
      -webkit-box-ordinal-group: 3;
      -ms-flex-order: 2;
          order: 2; }
    eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row-reverse;
          flex-direction: row-reverse;
      -webkit-box-ordinal-group: 2;
      -ms-flex-order: 1;
          order: 1; }
      eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
        margin-right: 10px; }
  eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
        flex-direction: row; }
    eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger {
      -webkit-box-ordinal-group: 2;
      -ms-flex-order: 1;
          order: 1; }
    eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
      -webkit-box-ordinal-group: 3;
      -ms-flex-order: 2;
          order: 2; }
      eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item {
        margin-left: 10px; }
`],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
EcoFabSpeedDialComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
EcoFabSpeedDialComponent.propDecorators = {
    "fixed": [{ type: Input },],
    "open": [{ type: HostBinding, args: ['class.eco-opened',] }, { type: Input },],
    "direction": [{ type: Input },],
    "animationMode": [{ type: Input },],
    "openChange": [{ type: Output },],
    "_childActions": [{ type: ContentChild, args: [EcoFabSpeedDialActionsComponent,] },],
    "_onClick": [{ type: HostListener, args: ['click',] },],
};
class EcoFabSpeedDialTriggerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.spin = false;
        this._parent = injector.get(EcoFabSpeedDialComponent);
    }
    /**
     * Whether this trigger should spin (360dg) while opening the speed dial
     * @return {?}
     */
    get sp() {
        return this.spin;
    }
    ;
    /**
     * @param {?} event
     * @return {?}
     */
    _onClick(event) {
        if (!this._parent.fixed) {
            this._parent.toggle();
            event.stopPropagation();
        }
    }
}
EcoFabSpeedDialTriggerComponent.decorators = [
    { type: Component, args: [{
                selector: 'eco-fab-speed-dial-trigger',
                template: `
        <ng-content select="[mat-fab]"></ng-content>`,
            },] },
];
/** @nocollapse */
EcoFabSpeedDialTriggerComponent.ctorParameters = () => [
    { type: Injector, },
];
EcoFabSpeedDialTriggerComponent.propDecorators = {
    "sp": [{ type: HostBinding, args: ['class.eco-spin',] },],
    "spin": [{ type: Input },],
    "_onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EcoFabSpeedDialModule {
}
EcoFabSpeedDialModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    EcoFabSpeedDialActionsComponent,
                    EcoFabSpeedDialComponent,
                    EcoFabSpeedDialTriggerComponent,
                ],
                exports: [
                    EcoFabSpeedDialActionsComponent,
                    EcoFabSpeedDialComponent,
                    EcoFabSpeedDialTriggerComponent,
                ],
            },] },
];
/** @nocollapse */
EcoFabSpeedDialModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { EcoFabSpeedDialModule, EcoFabSpeedDialActionsComponent as ɵa, EcoFabSpeedDialComponent as ɵb, EcoFabSpeedDialTriggerComponent as ɵc };
//# sourceMappingURL=ecodev-fab-speed-dial.js.map
