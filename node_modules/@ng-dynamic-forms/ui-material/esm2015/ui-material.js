/*!
@ng-dynamic-forms/ui-material 5.4.4 2018-01-28 19:35 UTC
Copyright (c) 2016-2017, Udo SchÃ¶fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
import { ChangeDetectorRef, Component, ContentChildren, EventEmitter, Input, Output, ViewChild, ViewChildren, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MatInput, MatAutocompleteModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatIconModule, MatInputModule, MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule } from '@angular/material';
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicTemplateDirective, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicFormComponent, DynamicFormService, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import { CommonModule } from '@angular/common';
import { TextMaskModule } from 'angular2-text-mask';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
const MatFormControlType = {
    Array: 1,
    //"ARRAY",
    Checkbox: 2,
    //"CHECKBOX",
    Chips: 3,
    //"CHIPS",
    DatePicker: 4,
    //"DATEPICKER",
    Group: 5,
    //"GROUP",
    Input: 6,
    //"INPUT",
    RadioGroup: 7,
    //"RADIO_GROUP",
    Select: 8,
    //"SELECT",
    Slider: 9,
    //"SLIDER",
    SlideToggle: 10,
    //"SLIDE_TOGGLE",
    TextArea: 11,
};
MatFormControlType[MatFormControlType.Array] = "Array";
MatFormControlType[MatFormControlType.Checkbox] = "Checkbox";
MatFormControlType[MatFormControlType.Chips] = "Chips";
MatFormControlType[MatFormControlType.DatePicker] = "DatePicker";
MatFormControlType[MatFormControlType.Group] = "Group";
MatFormControlType[MatFormControlType.Input] = "Input";
MatFormControlType[MatFormControlType.RadioGroup] = "RadioGroup";
MatFormControlType[MatFormControlType.Select] = "Select";
MatFormControlType[MatFormControlType.Slider] = "Slider";
MatFormControlType[MatFormControlType.SlideToggle] = "SlideToggle";
MatFormControlType[MatFormControlType.TextArea] = "TextArea";
const MAT_VIEW_CHILD_SELECTOR = `matAutocomplete,matCheckbox,matDatepicker,matInput,matRadioGroup,matSelect,
    matSlider,matSlideToggle,matTextarea`;
const MAT_LABEL_POSITION_AFTER = "after";
const MAT_LABEL_POSITION_BEFORE = "before";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormControlComponent extends DynamicFormControlComponent {
    /**
     * @param {?} changeDetectorRef
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(changeDetectorRef, layoutService, validationService) {
        super(changeDetectorRef, layoutService, validationService);
        this.changeDetectorRef = changeDetectorRef;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.chipList = null;
        this._showCharacterCount = false;
        this.bindId = true;
        this.context = null;
        this.hasErrorMessaging = false;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get showCharacterHint() {
        return !!(this._showCharacterCount && (/** @type {?} */ (this.model)).maxLength && this.characterCount);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showCharacterHint(value) {
        this._showCharacterCount = value;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes["model"]) {
            this.updateFormControlType();
        }
    }
    /**
     * @return {?}
     */
    get characterCount() {
        return this.matInput ? this.matInput.value.length : null;
    }
    /**
     * @return {?}
     */
    get characterHint() {
        return `${this.characterCount} / ${((/** @type {?} */ (this.model))).maxLength}`;
    }
    /**
     * @return {?}
     */
    get hasMatFormField() {
        return this.type === 3 || this.type === 4 || this.type === 6 || this.type === 8 || this.type === 11;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChipInputTokenEnd($event) {
        let /** @type {?} */ inputElement = $event.input, /** @type {?} */ inputValue = $event.value.trim();
        if (Array.isArray(this.chipList) && inputValue.length > 0) {
            this.chipList.push(inputValue);
            this.control.patchValue(this.chipList);
        }
        if (inputElement instanceof HTMLInputElement) {
            inputElement.value = "";
        }
    }
    /**
     * @param {?} _chip
     * @param {?} index
     * @return {?}
     */
    onChipRemoved(_chip, index) {
        if (Array.isArray(this.chipList)) {
            this.chipList.splice(index, 1);
            this.control.patchValue(this.chipList);
        }
    }
    /**
     * @return {?}
     */
    updateFormControlType() {
        this.type = DynamicMaterialFormControlComponent.getFormControlType(this.model);
        if (this.type === MatFormControlType.Chips) {
            this.chipList = (/** @type {?} */ (this.model)).value || [];
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    static getFormControlType(model) {
        switch (model.type) {
            case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                return MatFormControlType.Array;
            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                return MatFormControlType.Checkbox;
            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                return MatFormControlType.Group;
            case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                return MatFormControlType.DatePicker;
            case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                let /** @type {?} */ inputModel = /** @type {?} */ (model);
                return inputModel.multiple ? MatFormControlType.Chips : MatFormControlType.Input;
            case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                return MatFormControlType.RadioGroup;
            case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                return MatFormControlType.Select;
            case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
                return MatFormControlType.Slider;
            case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                return MatFormControlType.SlideToggle;
            case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                return MatFormControlType.TextArea;
            default:
                return null;
        }
    }
}
DynamicMaterialFormControlComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form-control,dynamic-form-material-control",
                template: "<div [formGroup]=\"group\" [ngClass]=\"[getClass('element', 'container'), getClass('grid', 'container')]\"><label *ngIf=\"model.label && !hasMatFormField && type !== 2\" [for]=\"model.id\" [innerHTML]=\"model.label\" [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label><ng-container *ngTemplateOutlet=\"templates[0]?.templateRef; context: model\"></ng-container><ng-container [ngSwitch]=\"type\"><div *ngSwitchCase=\"1\" [dynamicId]=\"bindId && model.id\" [formArrayName]=\"model.id\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"><div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\" [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\"><dynamic-material-form-control *ngFor=\"let _model of groupModel.group\" [bindId]=\"false\" [context]=\"groupModel\" [group]=\"control.at(idx)\" [hasErrorMessaging]=\"_model.hasErrorMessages\" [hidden]=\"_model.hidden\" [layout]=\"layout\" [model]=\"_model\" [templates]=\"templateList\" [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\" (dfBlur)=\"onBlur($event)\" (dfChange)=\"onValueChange($event)\" (dfFocus)=\"onFocus($event)\" (matEvent)=\"onCustomEvent($event)\"></dynamic-material-form-control><ng-container *ngTemplateOutlet=\"templates[2]?.templateRef; context: groupModel\"></ng-container></div></div><mat-checkbox *ngSwitchCase=\"2\" #matCheckbox [checked]=\"model.checked\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [indeterminate]=\"model.indeterminate\" [labelPosition]=\"model.labelPosition || 'after'\" [name]=\"model.name\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\" (indeterminateChange)=\"onMatEvent($event, 'indeterminateChange')\"><span [ngClass]=\"getClass('element', 'label')\" [innerHTML]=\"model.label\"></span></mat-checkbox><mat-form-field *ngSwitchCase=\"3\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><mat-chip-list #matChipList [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [multiple]=\"true\"><mat-chip *ngFor=\"let chip of chipList; let index = index\" [selectable]=\"false\" (removed)=\"onChipRemoved(chip, index)\"><span>{{ chip }}</span><mat-icon matChipRemove>cancel</mat-icon></mat-chip><input matInput [placeholder]=\"model.placeholder\" [matChipInputFor]=\"matChipList\" [matChipInputAddOnBlur]=\"true\" [matChipInputSeparatorKeyCodes]=\"[13, 188]\" (matChipInputTokenEnd)=\"onChipInputTokenEnd($event)\"></mat-chip-list></mat-form-field><mat-form-field *ngSwitchCase=\"4\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span> <input matInput [autofocus]=\"model.autoFocus\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [max]=\"model.max\" [matDatepicker]=\"matDatepicker\" [min]=\"model.min\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" (blur)=\"onBlur($event)\" (dateChange)=\"onValueChange($event)\" (dateInput)=\"onCustomEvent($event, 'dateInput')\" (focus)=\"onFocus($event)\"> <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle><mat-datepicker #matDatepicker [opened]=\"getAdditional('opened', false)\" [startAt]=\"model.focusedDate\" [startView]=\"getAdditional('startView', 'month')\" [touchUi]=\"getAdditional('touchUi', false)\" (closed)=\"onCustomEvent($event, 'closed')\" (opened)=\"onCustomEvent($event, 'opened')\"></mat-datepicker><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field><div *ngSwitchCase=\"5\" role=\"group\" [dynamicId]=\"bindId && model.id\" [formGroupName]=\"model.id\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"><dynamic-material-form-control *ngFor=\"let _model of model.group\" [group]=\"control\" [hasErrorMessaging]=\"_model.hasErrorMessages\" [hidden]=\"_model.hidden\" [layout]=\"layout\" [model]=\"_model\" [templates]=\"templateList\" [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\" (dfBlur)=\"onBlur($event)\" (dfChange)=\"onValueChange($event)\" (dfFocus)=\"onFocus($event)\" (matEvent)=\"onCustomEvent($event)\"></dynamic-material-form-control></div><ng-container *ngSwitchCase=\"6\"><mat-form-field [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid','control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\" [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span> <input matInput [attr.accept]=\"model.accept\" [attr.list]=\"model.listId\" [attr.max]=\"model.max\" [attr.min]=\"model.min\" [attr.multiple]=\"model.multiple\" [attr.step]=\"model.step\" [autocomplete]=\"model.autoComplete\" [autofocus]=\"model.autoFocus\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [maxlength]=\"model.maxLength\" [matAutocomplete]=\"matAutocomplete\" [minlength]=\"model.minLength\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [pattern]=\"model.pattern\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" [spellcheck]=\"model.spellCheck\" [tabindex]=\"model.tabIndex\" [type]=\"model.inputType\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"> <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field><mat-autocomplete #matAutocomplete=\"matAutocomplete\" (optionSelected)=\"onValueChange($event)\"><mat-option *ngFor=\"let option of model.list\" [value]=\"option\">{{ option }}</mat-option></mat-autocomplete></ng-container><mat-radio-group *ngSwitchCase=\"7\" #matRadioGroup [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [name]=\"model.name\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"><mat-radio-button *ngFor=\"let option of model.options$ | async\" [labelPosition]=\"'after'\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'option')\" [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-radio-button></mat-radio-group><mat-form-field *ngSwitchCase=\"8\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span><mat-select #matSelect [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [multiple]=\"model.multiple\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [required]=\"model.required\" (change)=\"onValueChange($event)\" (closed)=\"onCustomEvent($event, 'closed')\" (opened)=\"onCustomEvent($event, 'opened')\"><mat-option *ngFor=\"let option of model.options$ | async\" [ngClass]=\"getClass('element', 'option')\" [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-option></mat-select><span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error></ng-container></mat-form-field><mat-slider *ngSwitchCase=\"9\" #matSlider [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [invert]=\"getAdditional('invert', false)\" [min]=\"model.min\" [max]=\"model.max\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" [step]=\"model.step\" [tabIndex]=\"model.tabIndex\" [thumbLabel]=\"getAdditional('thumbLabel', true)\" [tickInterval]=\"getAdditional('tickInterval', 1)\" [vertical]=\"model.vertical\" (change)=\"onValueChange($event)\" (input)=\"onCustomEvent($event, 'input')\"></mat-slider><mat-slide-toggle *ngSwitchCase=\"10\" #matSlideToggle [checked]=\"model.checked\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [labelPosition]=\"model.labelPosition || 'after'\" [name]=\"model.name\" [ngClass]=\"[getClass('element','control'), getClass('grid','control')]\" (change)=\"onValueChange($event)\"><span *ngIf=\"!model.checked\" [innerHTML]=\"model.offLabel\"></span> <span *ngIf=\"model.checked\" [innerHTML]=\"model.onLabel\"></span></mat-slide-toggle><mat-form-field *ngSwitchCase=\"11\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><textarea matInput [cols]=\"model.cols\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [maxlength]=\"model.maxLength\" [minlength]=\"model.minLength\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" [rows]=\"model.rows\" [spellcheck]=\"model.spellCheck\" [tabindex]=\"model.tabIndex\" [wrap]=\"model.wrap\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"></textarea><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field></ng-container><ng-container *ngIf=\"!hasMatFormField && hasErrorMessaging\"><mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error></ng-container><ng-container *ngTemplateOutlet=\"templates[1]?.templateRef; context: model\"></ng-container><ng-content></ng-content></div>"
            },] },
];
/** @nocollapse */
DynamicMaterialFormControlComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialFormControlComponent.propDecorators = {
    "contentTemplateList": [{ type: ContentChildren, args: [DynamicTemplateDirective,] },],
    "inputTemplateList": [{ type: Input, args: ["templates",] },],
    "bindId": [{ type: Input },],
    "context": [{ type: Input },],
    "group": [{ type: Input },],
    "hasErrorMessaging": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "showCharacterHint": [{ type: Input },],
    "blur": [{ type: Output, args: ["dfBlur",] },],
    "change": [{ type: Output, args: ["dfChange",] },],
    "focus": [{ type: Output, args: ["dfFocus",] },],
    "customEvent": [{ type: Output, args: ["matEvent",] },],
    "matViewChild": [{ type: ViewChild, args: [MAT_VIEW_CHILD_SELECTOR,] },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormComponent extends DynamicFormComponent {
    /**
     * @param {?} formService
     * @param {?} layoutService
     */
    constructor(formService, layoutService) {
        super(formService, layoutService);
        this.formService = formService;
        this.layoutService = layoutService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
}
DynamicMaterialFormComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form",
                template: "<dynamic-material-form-control *ngFor=\"let model of formModel; trackBy: trackByFn\" [group]=\"formGroup\" [hasErrorMessaging]=\"model.hasErrorMessages\" [hidden]=\"model.hidden\" [layout]=\"formLayout\" [model]=\"model\" [ngClass]=\"[getClass(model, 'element', 'host'), getClass(model, 'grid', 'host')]\" [showCharacterHint]=\"model.type === 'INPUT'\" [templates]=\"templates\" (dfBlur)=\"onEvent($event, 'blur')\" (dfChange)=\"onEvent($event, 'change')\" (dfFocus)=\"onEvent($event, 'focus')\" (matEvent)=\"onEvent($event, 'custom')\"></dynamic-material-form-control>"
            },] },
];
/** @nocollapse */
DynamicMaterialFormComponent.ctorParameters = () => [
    { type: DynamicFormService, },
    { type: DynamicFormLayoutService, },
];
DynamicMaterialFormComponent.propDecorators = {
    "formGroup": [{ type: Input, args: ["group",] },],
    "formModel": [{ type: Input, args: ["model",] },],
    "formLayout": [{ type: Input, args: ["layout",] },],
    "blur": [{ type: Output, args: ["dfBlur",] },],
    "change": [{ type: Output, args: ["dfChange",] },],
    "focus": [{ type: Output, args: ["dfFocus",] },],
    "customEvent": [{ type: Output, args: ["matEvent",] },],
    "templates": [{ type: ContentChildren, args: [DynamicTemplateDirective,] },],
    "components": [{ type: ViewChildren, args: [DynamicMaterialFormControlComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicFormsMaterialUIModule {
}
DynamicFormsMaterialUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatAutocompleteModule,
                    MatCheckboxModule,
                    MatChipsModule,
                    MatDatepickerModule,
                    MatIconModule,
                    MatInputModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatSliderModule,
                    MatSlideToggleModule,
                    TextMaskModule,
                    DynamicFormsCoreModule
                ],
                declarations: [
                    DynamicMaterialFormControlComponent,
                    DynamicMaterialFormComponent
                ],
                exports: [
                    DynamicFormsCoreModule,
                    DynamicMaterialFormControlComponent,
                    DynamicMaterialFormComponent
                ]
            },] },
];
/** @nocollapse */
DynamicFormsMaterialUIModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DynamicMaterialFormComponent, MatFormControlType, MAT_VIEW_CHILD_SELECTOR, MAT_LABEL_POSITION_AFTER, MAT_LABEL_POSITION_BEFORE, DynamicMaterialFormControlComponent, DynamicFormsMaterialUIModule };
//# sourceMappingURL=ui-material.js.map
