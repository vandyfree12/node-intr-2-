{"version":3,"file":"ui-material.js","sources":["../../../es5/ui-material/src/dynamic-material-form.const.ts","../../../es5/ui-material/src/dynamic-material-form-control.component.ts","../../../es5/ui-material/src/dynamic-material-form.component.ts","../../../es5/ui-material/src/dynamic-material-form-ui.module.ts"],"sourcesContent":["export enum MatFormControlType {\n\n    Array = 1, //\"ARRAY\",\n    Checkbox = 2, //\"CHECKBOX\",\n    Chips = 3, //\"CHIPS\",\n    DatePicker = 4, //\"DATEPICKER\",\n    Group = 5, //\"GROUP\",\n    Input = 6, //\"INPUT\",\n    RadioGroup = 7, //\"RADIO_GROUP\",\n    Select = 8, //\"SELECT\",\n    Slider = 9, //\"SLIDER\",\n    SlideToggle = 10, //\"SLIDE_TOGGLE\",\n    TextArea = 11 //\"TEXTAREA\"\n}\n\nexport const MAT_VIEW_CHILD_SELECTOR = `matAutocomplete,matCheckbox,matDatepicker,matInput,matRadioGroup,matSelect,\n    matSlider,matSlideToggle,matTextarea`;\n\nexport const MAT_LABEL_POSITION_AFTER = \"after\";\nexport const MAT_LABEL_POSITION_BEFORE = \"before\";\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChild\n} from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    MatAutocomplete,\n    MatCheckbox,\n    MatChipInputEvent,\n    MatDatepicker,\n    MatFormField,\n    MatInput,\n    MatRadioGroup,\n    MatSelect,\n    MatSlider,\n    MatSlideToggle\n} from \"@angular/material\";\nimport {\n    DynamicFormArrayGroupModel,\n    DynamicFormControlComponent,\n    DynamicFormControlEvent,\n    DynamicFormControlModel,\n    DynamicFormValueControlModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormValidationService,\n    DynamicTemplateDirective,\n    DynamicInputControlModel,\n    DynamicInputModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX,\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DYNAMIC_FORM_CONTROL_TYPE_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DYNAMIC_FORM_CONTROL_TYPE_SELECT,\n    DYNAMIC_FORM_CONTROL_TYPE_SLIDER,\n    DYNAMIC_FORM_CONTROL_TYPE_SWITCH,\n    DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA\n} from \"@ng-dynamic-forms/core\";\nimport { MatFormControlType, MAT_VIEW_CHILD_SELECTOR } from \"./dynamic-material-form.const\";\n\nexport type MatFormControlComponent = MatAutocomplete | MatCheckbox | MatDatepicker<Date> | MatFormField |\n    MatRadioGroup | MatSelect | MatSlider | MatSlideToggle;\n\n@Component({\n    selector: \"dynamic-material-form-control,dynamic-form-material-control\",\n    template: \"<div [formGroup]=\\\"group\\\" [ngClass]=\\\"[getClass('element', 'container'), getClass('grid', 'container')]\\\"><label *ngIf=\\\"model.label && !hasMatFormField && type !== 2\\\" [for]=\\\"model.id\\\" [innerHTML]=\\\"model.label\\\" [ngClass]=\\\"[getClass('element', 'label'), getClass('grid', 'label')]\\\"></label><ng-container *ngTemplateOutlet=\\\"templates[0]?.templateRef; context: model\\\"></ng-container><ng-container [ngSwitch]=\\\"type\\\"><div *ngSwitchCase=\\\"1\\\" [dynamicId]=\\\"bindId && model.id\\\" [formArrayName]=\\\"model.id\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"><div *ngFor=\\\"let groupModel of model.groups; let idx = index\\\" role=\\\"group\\\" [formGroupName]=\\\"idx\\\" [ngClass]=\\\"[getClass('element', 'group'), getClass('grid', 'group')]\\\"><dynamic-material-form-control *ngFor=\\\"let _model of groupModel.group\\\" [bindId]=\\\"false\\\" [context]=\\\"groupModel\\\" [group]=\\\"control.at(idx)\\\" [hasErrorMessaging]=\\\"_model.hasErrorMessages\\\" [hidden]=\\\"_model.hidden\\\" [layout]=\\\"layout\\\" [model]=\\\"_model\\\" [templates]=\\\"templateList\\\" [ngClass]=\\\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\\\" (dfBlur)=\\\"onBlur($event)\\\" (dfChange)=\\\"onValueChange($event)\\\" (dfFocus)=\\\"onFocus($event)\\\" (matEvent)=\\\"onCustomEvent($event)\\\"></dynamic-material-form-control><ng-container *ngTemplateOutlet=\\\"templates[2]?.templateRef; context: groupModel\\\"></ng-container></div></div><mat-checkbox *ngSwitchCase=\\\"2\\\" #matCheckbox [checked]=\\\"model.checked\\\" [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [indeterminate]=\\\"model.indeterminate\\\" [labelPosition]=\\\"model.labelPosition || 'after'\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\" (blur)=\\\"onBlur($event)\\\" (change)=\\\"onValueChange($event)\\\" (focus)=\\\"onFocus($event)\\\" (indeterminateChange)=\\\"onMatEvent($event, 'indeterminateChange')\\\"><span [ngClass]=\\\"getClass('element', 'label')\\\" [innerHTML]=\\\"model.label\\\"></span></mat-checkbox><mat-form-field *ngSwitchCase=\\\"3\\\" [color]=\\\"getAdditional('color', 'primary')\\\" [ngClass]=\\\"getClass('grid', 'control')\\\" [floatLabel]=\\\"getAdditional('floatLabel', 'auto')\\\"><mat-chip-list #matChipList [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [multiple]=\\\"true\\\"><mat-chip *ngFor=\\\"let chip of chipList; let index = index\\\" [selectable]=\\\"false\\\" (removed)=\\\"onChipRemoved(chip, index)\\\"><span>{{ chip }}</span><mat-icon matChipRemove>cancel</mat-icon></mat-chip><input matInput [placeholder]=\\\"model.placeholder\\\" [matChipInputFor]=\\\"matChipList\\\" [matChipInputAddOnBlur]=\\\"true\\\" [matChipInputSeparatorKeyCodes]=\\\"[13, 188]\\\" (matChipInputTokenEnd)=\\\"onChipInputTokenEnd($event)\\\"></mat-chip-list></mat-form-field><mat-form-field *ngSwitchCase=\\\"4\\\" [color]=\\\"getAdditional('color', 'primary')\\\" [ngClass]=\\\"getClass('grid', 'control')\\\" [floatLabel]=\\\"getAdditional('floatLabel', 'auto')\\\"><ng-container *ngIf=\\\"model.label\\\" ngProjectAs=\\\"mat-label\\\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\\\"model.prefix\\\" matPrefix [innerHTML]=\\\"model.prefix\\\"></span> <input matInput [autofocus]=\\\"model.autoFocus\\\" [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [max]=\\\"model.max\\\" [matDatepicker]=\\\"matDatepicker\\\" [min]=\\\"model.min\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"getClass('element', 'control')\\\" [placeholder]=\\\"model.placeholder\\\" [readonly]=\\\"model.readOnly\\\" [required]=\\\"model.required\\\" (blur)=\\\"onBlur($event)\\\" (dateChange)=\\\"onValueChange($event)\\\" (dateInput)=\\\"onCustomEvent($event, 'dateInput')\\\" (focus)=\\\"onFocus($event)\\\"> <span *ngIf=\\\"model.suffix\\\" matSuffix [innerHTML]=\\\"model.suffix\\\"></span><mat-hint *ngIf=\\\"showHint\\\" align=\\\"start\\\" [innerHTML]=\\\"model.hint\\\"></mat-hint><mat-datepicker-toggle matSuffix [for]=\\\"matDatepicker\\\"></mat-datepicker-toggle><mat-datepicker #matDatepicker [opened]=\\\"getAdditional('opened', false)\\\" [startAt]=\\\"model.focusedDate\\\" [startView]=\\\"getAdditional('startView', 'month')\\\" [touchUi]=\\\"getAdditional('touchUi', false)\\\" (closed)=\\\"onCustomEvent($event, 'closed')\\\" (opened)=\\\"onCustomEvent($event, 'opened')\\\"></mat-datepicker><ng-container *ngFor=\\\"let message of errorMessages\\\" ngProjectAs=\\\"mat-error\\\"><mat-error *ngIf=\\\"hasErrorMessaging\\\">{{ message }}</mat-error></ng-container></mat-form-field><div *ngSwitchCase=\\\"5\\\" role=\\\"group\\\" [dynamicId]=\\\"bindId && model.id\\\" [formGroupName]=\\\"model.id\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\"><dynamic-material-form-control *ngFor=\\\"let _model of model.group\\\" [group]=\\\"control\\\" [hasErrorMessaging]=\\\"_model.hasErrorMessages\\\" [hidden]=\\\"_model.hidden\\\" [layout]=\\\"layout\\\" [model]=\\\"_model\\\" [templates]=\\\"templateList\\\" [ngClass]=\\\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\\\" (dfBlur)=\\\"onBlur($event)\\\" (dfChange)=\\\"onValueChange($event)\\\" (dfFocus)=\\\"onFocus($event)\\\" (matEvent)=\\\"onCustomEvent($event)\\\"></dynamic-material-form-control></div><ng-container *ngSwitchCase=\\\"6\\\"><mat-form-field [color]=\\\"getAdditional('color', 'primary')\\\" [ngClass]=\\\"getClass('grid','control')\\\" [floatLabel]=\\\"getAdditional('floatLabel', 'auto')\\\" [textMask]=\\\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\\\"><ng-container *ngIf=\\\"model.label\\\" ngProjectAs=\\\"mat-label\\\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\\\"model.prefix\\\" matPrefix [innerHTML]=\\\"model.prefix\\\"></span> <input matInput [attr.accept]=\\\"model.accept\\\" [attr.list]=\\\"model.listId\\\" [attr.max]=\\\"model.max\\\" [attr.min]=\\\"model.min\\\" [attr.multiple]=\\\"model.multiple\\\" [attr.step]=\\\"model.step\\\" [autocomplete]=\\\"model.autoComplete\\\" [autofocus]=\\\"model.autoFocus\\\" [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [maxlength]=\\\"model.maxLength\\\" [matAutocomplete]=\\\"matAutocomplete\\\" [minlength]=\\\"model.minLength\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"getClass('element', 'control')\\\" [pattern]=\\\"model.pattern\\\" [placeholder]=\\\"model.placeholder\\\" [readonly]=\\\"model.readOnly\\\" [required]=\\\"model.required\\\" [spellcheck]=\\\"model.spellCheck\\\" [tabindex]=\\\"model.tabIndex\\\" [type]=\\\"model.inputType\\\" (blur)=\\\"onBlur($event)\\\" (change)=\\\"onValueChange($event)\\\" (focus)=\\\"onFocus($event)\\\"> <span *ngIf=\\\"model.suffix\\\" matSuffix [innerHTML]=\\\"model.suffix\\\"></span><mat-hint *ngIf=\\\"showHint\\\" align=\\\"start\\\" [innerHTML]=\\\"model.hint\\\"></mat-hint><mat-hint *ngIf=\\\"showCharacterHint\\\" align=\\\"end\\\">{{ characterHint }}</mat-hint><ng-container *ngFor=\\\"let message of errorMessages\\\" ngProjectAs=\\\"mat-error\\\"><mat-error *ngIf=\\\"hasErrorMessaging\\\">{{ message }}</mat-error></ng-container></mat-form-field><mat-autocomplete #matAutocomplete=\\\"matAutocomplete\\\" (optionSelected)=\\\"onValueChange($event)\\\"><mat-option *ngFor=\\\"let option of model.list\\\" [value]=\\\"option\\\">{{ option }}</mat-option></mat-autocomplete></ng-container><mat-radio-group *ngSwitchCase=\\\"7\\\" #matRadioGroup [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\" (blur)=\\\"onBlur($event)\\\" (change)=\\\"onValueChange($event)\\\" (focus)=\\\"onFocus($event)\\\"><mat-radio-button *ngFor=\\\"let option of model.options$ | async\\\" [labelPosition]=\\\"'after'\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"getClass('element', 'option')\\\" [value]=\\\"option.value\\\"><span [innerHTML]=\\\"option.label\\\"></span></mat-radio-button></mat-radio-group><mat-form-field *ngSwitchCase=\\\"8\\\" [color]=\\\"getAdditional('color', 'primary')\\\" [ngClass]=\\\"getClass('grid', 'control')\\\" [floatLabel]=\\\"getAdditional('floatLabel', 'auto')\\\"><ng-container *ngIf=\\\"model.label\\\" ngProjectAs=\\\"mat-label\\\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\\\"model.prefix\\\" matPrefix [innerHTML]=\\\"model.prefix\\\"></span><mat-select #matSelect [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [multiple]=\\\"model.multiple\\\" [ngClass]=\\\"getClass('element', 'control')\\\" [placeholder]=\\\"model.placeholder\\\" [required]=\\\"model.required\\\" (change)=\\\"onValueChange($event)\\\" (closed)=\\\"onCustomEvent($event, 'closed')\\\" (opened)=\\\"onCustomEvent($event, 'opened')\\\"><mat-option *ngFor=\\\"let option of model.options$ | async\\\" [ngClass]=\\\"getClass('element', 'option')\\\" [value]=\\\"option.value\\\"><span [innerHTML]=\\\"option.label\\\"></span></mat-option></mat-select><span *ngIf=\\\"model.suffix\\\" matSuffix [innerHTML]=\\\"model.suffix\\\"></span><mat-hint *ngIf=\\\"showHint\\\" align=\\\"start\\\" [innerHTML]=\\\"model.hint\\\"></mat-hint><ng-container *ngFor=\\\"let message of errorMessages\\\" ngProjectAs=\\\"mat-error\\\"><mat-error *ngIf=\\\"showErrorMessages\\\">{{ message }}</mat-error></ng-container></mat-form-field><mat-slider *ngSwitchCase=\\\"9\\\" #matSlider [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [invert]=\\\"getAdditional('invert', false)\\\" [min]=\\\"model.min\\\" [max]=\\\"model.max\\\" [ngClass]=\\\"[getClass('element', 'control'), getClass('grid', 'control')]\\\" [step]=\\\"model.step\\\" [tabIndex]=\\\"model.tabIndex\\\" [thumbLabel]=\\\"getAdditional('thumbLabel', true)\\\" [tickInterval]=\\\"getAdditional('tickInterval', 1)\\\" [vertical]=\\\"model.vertical\\\" (change)=\\\"onValueChange($event)\\\" (input)=\\\"onCustomEvent($event, 'input')\\\"></mat-slider><mat-slide-toggle *ngSwitchCase=\\\"10\\\" #matSlideToggle [checked]=\\\"model.checked\\\" [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [labelPosition]=\\\"model.labelPosition || 'after'\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"[getClass('element','control'), getClass('grid','control')]\\\" (change)=\\\"onValueChange($event)\\\"><span *ngIf=\\\"!model.checked\\\" [innerHTML]=\\\"model.offLabel\\\"></span> <span *ngIf=\\\"model.checked\\\" [innerHTML]=\\\"model.onLabel\\\"></span></mat-slide-toggle><mat-form-field *ngSwitchCase=\\\"11\\\" [color]=\\\"getAdditional('color', 'primary')\\\" [ngClass]=\\\"getClass('grid', 'control')\\\" [floatLabel]=\\\"getAdditional('floatLabel', 'auto')\\\"><ng-container *ngIf=\\\"model.label\\\" ngProjectAs=\\\"mat-label\\\"><mat-label>{{ model.label }}</mat-label></ng-container><textarea matInput [cols]=\\\"model.cols\\\" [formControlName]=\\\"model.id\\\" [id]=\\\"bindId ? model.id : null\\\" [maxlength]=\\\"model.maxLength\\\" [minlength]=\\\"model.minLength\\\" [name]=\\\"model.name\\\" [ngClass]=\\\"getClass('element', 'control')\\\" [placeholder]=\\\"model.placeholder\\\" [readonly]=\\\"model.readOnly\\\" [required]=\\\"model.required\\\" [rows]=\\\"model.rows\\\" [spellcheck]=\\\"model.spellCheck\\\" [tabindex]=\\\"model.tabIndex\\\" [wrap]=\\\"model.wrap\\\" (blur)=\\\"onBlur($event)\\\" (change)=\\\"onValueChange($event)\\\" (focus)=\\\"onFocus($event)\\\"></textarea><mat-hint *ngIf=\\\"showHint\\\" align=\\\"start\\\" [innerHTML]=\\\"model.hint\\\"></mat-hint><mat-hint *ngIf=\\\"showCharacterHint\\\" align=\\\"end\\\">{{ characterHint }}</mat-hint><ng-container *ngFor=\\\"let message of errorMessages\\\" ngProjectAs=\\\"mat-error\\\"><mat-error *ngIf=\\\"hasErrorMessaging\\\">{{ message }}</mat-error></ng-container></mat-form-field></ng-container><ng-container *ngIf=\\\"!hasMatFormField && hasErrorMessaging\\\"><mat-error *ngFor=\\\"let message of errorMessages\\\">{{ message }}</mat-error></ng-container><ng-container *ngTemplateOutlet=\\\"templates[1]?.templateRef; context: model\\\"></ng-container><ng-content></ng-content></div>\"\n})\nexport class DynamicMaterialFormControlComponent extends DynamicFormControlComponent implements OnChanges {\n\n    private chipList: string[] | null = null;\n    private _showCharacterCount: boolean = false;\n\n    @ContentChildren(DynamicTemplateDirective) contentTemplateList: QueryList<DynamicTemplateDirective>;\n    @Input(\"templates\") inputTemplateList: QueryList<DynamicTemplateDirective>;\n\n    @Input() bindId: boolean = true;\n    @Input() context: DynamicFormArrayGroupModel | null = null;\n    @Input() group: FormGroup;\n    @Input() hasErrorMessaging: boolean = false;\n    @Input() layout: DynamicFormLayout;\n    @Input() model: DynamicFormControlModel;\n\n    @Input()\n    get showCharacterHint(): boolean {\n        return !!(this._showCharacterCount && (this.model as DynamicInputModel).maxLength && this.characterCount);\n    }\n\n    set showCharacterHint(value: boolean) {\n        this._showCharacterCount = value;\n    }\n\n    @Output(\"dfBlur\") blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfChange\") change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfFocus\") focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"matEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ViewChild(MAT_VIEW_CHILD_SELECTOR) matViewChild: MatFormControlComponent | undefined;\n    @ViewChild(MatInput) matInput: MatInput | undefined;\n\n    type: MatFormControlType | null;\n\n    constructor(protected changeDetectorRef: ChangeDetectorRef, protected layoutService: DynamicFormLayoutService,\n                protected validationService: DynamicFormValidationService) {\n\n        super(changeDetectorRef, layoutService, validationService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        super.ngOnChanges(changes);\n\n        if (changes[\"model\"]) {\n            this.updateFormControlType();\n        }\n    }\n\n    get characterCount(): number | null {\n        return this.matInput ? this.matInput.value.length : null;\n    }\n\n    get characterHint(): string {\n        return `${this.characterCount} / ${(this.model as DynamicInputControlModel<string>).maxLength}`;\n    }\n\n    get hasMatFormField(): boolean {\n        return this.type === 3 || this.type === 4 || this.type === 6 || this.type === 8 || this.type === 11;\n    }\n\n    onChipInputTokenEnd($event: MatChipInputEvent): void {\n\n        let inputElement = $event.input, inputValue = $event.value.trim();\n\n        if (Array.isArray(this.chipList) && inputValue.length > 0) {\n\n            this.chipList.push(inputValue);\n            this.control.patchValue(this.chipList);\n        }\n\n        if (inputElement instanceof HTMLInputElement) {\n            inputElement.value = \"\";\n        }\n    }\n\n    onChipRemoved(_chip: string, index: number): void {\n\n        if (Array.isArray(this.chipList)) {\n\n            this.chipList.splice(index, 1);\n            this.control.patchValue(this.chipList);\n        }\n    }\n\n    updateFormControlType(): void {\n\n        this.type = DynamicMaterialFormControlComponent.getFormControlType(this.model);\n\n        if (this.type === MatFormControlType.Chips) {\n            this.chipList = (this.model as DynamicFormValueControlModel<string[]>).value || [];\n        }\n    }\n\n    static getFormControlType(model: DynamicFormControlModel): MatFormControlType | null {\n\n        switch (model.type) {\n\n            case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                return MatFormControlType.Array;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                return MatFormControlType.Checkbox;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n            case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                return MatFormControlType.Group;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                return MatFormControlType.DatePicker;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                let inputModel = model as DynamicInputModel;\n\n                return inputModel.multiple ? MatFormControlType.Chips : MatFormControlType.Input;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                return MatFormControlType.RadioGroup;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                return MatFormControlType.Select;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                return MatFormControlType.Slider;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                return MatFormControlType.SlideToggle;\n\n            case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                return MatFormControlType.TextArea;\n\n            default:\n                return null;\n        }\n    }\n}","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewChildren } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport {\n    DynamicFormComponent,\n    DynamicFormControlEvent,\n    DynamicFormControlModel,\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormService,\n    DynamicTemplateDirective,\n} from \"@ng-dynamic-forms/core\";\nimport { DynamicMaterialFormControlComponent } from \"./dynamic-material-form-control.component\";\n\n@Component({\n    selector: \"dynamic-material-form\",\n    template: \"<dynamic-material-form-control *ngFor=\\\"let model of formModel; trackBy: trackByFn\\\" [group]=\\\"formGroup\\\" [hasErrorMessaging]=\\\"model.hasErrorMessages\\\" [hidden]=\\\"model.hidden\\\" [layout]=\\\"formLayout\\\" [model]=\\\"model\\\" [ngClass]=\\\"[getClass(model, 'element', 'host'), getClass(model, 'grid', 'host')]\\\" [showCharacterHint]=\\\"model.type === 'INPUT'\\\" [templates]=\\\"templates\\\" (dfBlur)=\\\"onEvent($event, 'blur')\\\" (dfChange)=\\\"onEvent($event, 'change')\\\" (dfFocus)=\\\"onEvent($event, 'focus')\\\" (matEvent)=\\\"onEvent($event, 'custom')\\\"></dynamic-material-form-control>\"\n})\nexport class DynamicMaterialFormComponent extends DynamicFormComponent {\n\n    @Input(\"group\") formGroup: FormGroup;\n    @Input(\"model\") formModel: DynamicFormControlModel[];\n    @Input(\"layout\") formLayout: DynamicFormLayout;\n\n    @Output(\"dfBlur\") blur: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfChange\") change: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"dfFocus\") focus: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n    @Output(\"matEvent\") customEvent: EventEmitter<DynamicFormControlEvent> = new EventEmitter<DynamicFormControlEvent>();\n\n    @ContentChildren(DynamicTemplateDirective) templates: QueryList<DynamicTemplateDirective>;\n\n    @ViewChildren(DynamicMaterialFormControlComponent) components: QueryList<DynamicMaterialFormControlComponent>;\n\n    constructor(protected formService: DynamicFormService, protected layoutService: DynamicFormLayoutService) {\n        super(formService, layoutService);\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport {\n    MatAutocompleteModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatIconModule,\n    MatInputModule,\n    MatRadioModule,\n    MatSelectModule,\n    MatSliderModule,\n    MatSlideToggleModule\n} from \"@angular/material\";\nimport { TextMaskModule } from \"angular2-text-mask\";\nimport { DynamicFormsCoreModule } from \"@ng-dynamic-forms/core\";\nimport { DynamicMaterialFormControlComponent } from \"./dynamic-material-form-control.component\";\nimport { DynamicMaterialFormComponent } from \"./dynamic-material-form.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        MatAutocompleteModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatDatepickerModule,\n        MatIconModule,\n        MatInputModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatSliderModule,\n        MatSlideToggleModule,\n        TextMaskModule,\n        DynamicFormsCoreModule\n    ],\n    declarations: [\n        DynamicMaterialFormControlComponent,\n        DynamicMaterialFormComponent\n    ],\n    exports: [\n        DynamicFormsCoreModule,\n        DynamicMaterialFormControlComponent,\n        DynamicMaterialFormComponent\n    ]\n})\nexport class DynamicFormsMaterialUIModule {\n}"],"names":["__extends"],"mappings":"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"}