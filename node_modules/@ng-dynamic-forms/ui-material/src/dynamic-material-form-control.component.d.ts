import { ChangeDetectorRef, EventEmitter, OnChanges, QueryList, SimpleChanges } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MatAutocomplete, MatCheckbox, MatChipInputEvent, MatDatepicker, MatFormField, MatInput, MatRadioGroup, MatSelect, MatSlider, MatSlideToggle } from "@angular/material";
import { DynamicFormArrayGroupModel, DynamicFormControlComponent, DynamicFormControlEvent, DynamicFormControlModel, DynamicFormLayout, DynamicFormLayoutService, DynamicFormValidationService, DynamicTemplateDirective } from "@ng-dynamic-forms/core";
import { MatFormControlType } from "./dynamic-material-form.const";
export declare type MatFormControlComponent = MatAutocomplete | MatCheckbox | MatDatepicker<Date> | MatFormField | MatRadioGroup | MatSelect | MatSlider | MatSlideToggle;
export declare class DynamicMaterialFormControlComponent extends DynamicFormControlComponent implements OnChanges {
    protected changeDetectorRef: ChangeDetectorRef;
    protected layoutService: DynamicFormLayoutService;
    protected validationService: DynamicFormValidationService;
    private chipList;
    private _showCharacterCount;
    contentTemplateList: QueryList<DynamicTemplateDirective>;
    inputTemplateList: QueryList<DynamicTemplateDirective>;
    bindId: boolean;
    context: DynamicFormArrayGroupModel | null;
    group: FormGroup;
    hasErrorMessaging: boolean;
    layout: DynamicFormLayout;
    model: DynamicFormControlModel;
    showCharacterHint: boolean;
    blur: EventEmitter<DynamicFormControlEvent>;
    change: EventEmitter<DynamicFormControlEvent>;
    focus: EventEmitter<DynamicFormControlEvent>;
    customEvent: EventEmitter<DynamicFormControlEvent>;
    matViewChild: MatFormControlComponent | undefined;
    matInput: MatInput | undefined;
    type: MatFormControlType | null;
    constructor(changeDetectorRef: ChangeDetectorRef, layoutService: DynamicFormLayoutService, validationService: DynamicFormValidationService);
    ngOnChanges(changes: SimpleChanges): void;
    readonly characterCount: number | null;
    readonly characterHint: string;
    readonly hasMatFormField: boolean;
    onChipInputTokenEnd($event: MatChipInputEvent): void;
    onChipRemoved(_chip: string, index: number): void;
    updateFormControlType(): void;
    static getFormControlType(model: DynamicFormControlModel): MatFormControlType | null;
}
