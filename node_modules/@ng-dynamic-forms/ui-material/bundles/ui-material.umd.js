/*!
@ng-dynamic-forms/ui-material 5.4.4 2018-01-28 19:35 UTC
Copyright (c) 2016-2017, Udo SchÃ¶fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material'), require('@ng-dynamic-forms/core'), require('@angular/common'), require('angular2-text-mask')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', '@angular/material', '@ng-dynamic-forms/core', '@angular/common', 'angular2-text-mask'], factory) :
	(factory((global.ngDF = global.ngDF || {}, global.ngDF.materialUI = {}),global.ng.core,global.ng.forms,global.ng.material,global.ngDF.core,global.ng.common,global['angular2-text-mask']));
}(this, (function (exports,core,forms,material,core$1,common,angular2TextMask) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var MatFormControlType = {
    Array: 1,
    //"ARRAY",
    Checkbox: 2,
    //"CHECKBOX",
    Chips: 3,
    //"CHIPS",
    DatePicker: 4,
    //"DATEPICKER",
    Group: 5,
    //"GROUP",
    Input: 6,
    //"INPUT",
    RadioGroup: 7,
    //"RADIO_GROUP",
    Select: 8,
    //"SELECT",
    Slider: 9,
    //"SLIDER",
    SlideToggle: 10,
    //"SLIDE_TOGGLE",
    TextArea: 11,
};
MatFormControlType[MatFormControlType.Array] = "Array";
MatFormControlType[MatFormControlType.Checkbox] = "Checkbox";
MatFormControlType[MatFormControlType.Chips] = "Chips";
MatFormControlType[MatFormControlType.DatePicker] = "DatePicker";
MatFormControlType[MatFormControlType.Group] = "Group";
MatFormControlType[MatFormControlType.Input] = "Input";
MatFormControlType[MatFormControlType.RadioGroup] = "RadioGroup";
MatFormControlType[MatFormControlType.Select] = "Select";
MatFormControlType[MatFormControlType.Slider] = "Slider";
MatFormControlType[MatFormControlType.SlideToggle] = "SlideToggle";
MatFormControlType[MatFormControlType.TextArea] = "TextArea";
var MAT_VIEW_CHILD_SELECTOR = "matAutocomplete,matCheckbox,matDatepicker,matInput,matRadioGroup,matSelect,\n    matSlider,matSlideToggle,matTextarea";
var MAT_LABEL_POSITION_AFTER = "after";
var MAT_LABEL_POSITION_BEFORE = "before";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicMaterialFormControlComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialFormControlComponent, _super);
    function DynamicMaterialFormControlComponent(changeDetectorRef, layoutService, validationService) {
        var _this = _super.call(this, changeDetectorRef, layoutService, validationService) || this;
        _this.changeDetectorRef = changeDetectorRef;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.chipList = null;
        _this._showCharacterCount = false;
        _this.bindId = true;
        _this.context = null;
        _this.hasErrorMessaging = false;
        _this.blur = new core.EventEmitter();
        _this.change = new core.EventEmitter();
        _this.focus = new core.EventEmitter();
        _this.customEvent = new core.EventEmitter();
        return _this;
    }
    Object.defineProperty(DynamicMaterialFormControlComponent.prototype, "showCharacterHint", {
        get: /**
         * @return {?}
         */
        function () {
            return !!(this._showCharacterCount && (/** @type {?} */ (this.model)).maxLength && this.characterCount);
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._showCharacterCount = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    DynamicMaterialFormControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (changes["model"]) {
            this.updateFormControlType();
        }
    };
    Object.defineProperty(DynamicMaterialFormControlComponent.prototype, "characterCount", {
        get: /**
         * @return {?}
         */
        function () {
            return this.matInput ? this.matInput.value.length : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicMaterialFormControlComponent.prototype, "characterHint", {
        get: /**
         * @return {?}
         */
        function () {
            return this.characterCount + " / " + ((/** @type {?} */ (this.model))).maxLength;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicMaterialFormControlComponent.prototype, "hasMatFormField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.type === 3 || this.type === 4 || this.type === 6 || this.type === 8 || this.type === 11;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    DynamicMaterialFormControlComponent.prototype.onChipInputTokenEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ inputElement = $event.input, /** @type {?} */ inputValue = $event.value.trim();
        if (Array.isArray(this.chipList) && inputValue.length > 0) {
            this.chipList.push(inputValue);
            this.control.patchValue(this.chipList);
        }
        if (inputElement instanceof HTMLInputElement) {
            inputElement.value = "";
        }
    };
    /**
     * @param {?} _chip
     * @param {?} index
     * @return {?}
     */
    DynamicMaterialFormControlComponent.prototype.onChipRemoved = /**
     * @param {?} _chip
     * @param {?} index
     * @return {?}
     */
    function (_chip, index) {
        if (Array.isArray(this.chipList)) {
            this.chipList.splice(index, 1);
            this.control.patchValue(this.chipList);
        }
    };
    /**
     * @return {?}
     */
    DynamicMaterialFormControlComponent.prototype.updateFormControlType = /**
     * @return {?}
     */
    function () {
        this.type = DynamicMaterialFormControlComponent.getFormControlType(this.model);
        if (this.type === MatFormControlType.Chips) {
            this.chipList = (/** @type {?} */ (this.model)).value || [];
        }
    };
    /**
     * @param {?} model
     * @return {?}
     */
    DynamicMaterialFormControlComponent.getFormControlType = /**
     * @param {?} model
     * @return {?}
     */
    function (model) {
        switch (model.type) {
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
                return MatFormControlType.Array;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
                return MatFormControlType.Checkbox;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_GROUP:
                return MatFormControlType.Group;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
                return MatFormControlType.DatePicker;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_INPUT:
                var /** @type {?} */ inputModel = /** @type {?} */ (model);
                return inputModel.multiple ? MatFormControlType.Chips : MatFormControlType.Input;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
                return MatFormControlType.RadioGroup;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SELECT:
                return MatFormControlType.Select;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
                return MatFormControlType.Slider;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
                return MatFormControlType.SlideToggle;
            case core$1.DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
                return MatFormControlType.TextArea;
            default:
                return null;
        }
    };
    DynamicMaterialFormControlComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-material-form-control,dynamic-form-material-control",
                    template: "<div [formGroup]=\"group\" [ngClass]=\"[getClass('element', 'container'), getClass('grid', 'container')]\"><label *ngIf=\"model.label && !hasMatFormField && type !== 2\" [for]=\"model.id\" [innerHTML]=\"model.label\" [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label><ng-container *ngTemplateOutlet=\"templates[0]?.templateRef; context: model\"></ng-container><ng-container [ngSwitch]=\"type\"><div *ngSwitchCase=\"1\" [dynamicId]=\"bindId && model.id\" [formArrayName]=\"model.id\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"><div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\" [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\"><dynamic-material-form-control *ngFor=\"let _model of groupModel.group\" [bindId]=\"false\" [context]=\"groupModel\" [group]=\"control.at(idx)\" [hasErrorMessaging]=\"_model.hasErrorMessages\" [hidden]=\"_model.hidden\" [layout]=\"layout\" [model]=\"_model\" [templates]=\"templateList\" [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\" (dfBlur)=\"onBlur($event)\" (dfChange)=\"onValueChange($event)\" (dfFocus)=\"onFocus($event)\" (matEvent)=\"onCustomEvent($event)\"></dynamic-material-form-control><ng-container *ngTemplateOutlet=\"templates[2]?.templateRef; context: groupModel\"></ng-container></div></div><mat-checkbox *ngSwitchCase=\"2\" #matCheckbox [checked]=\"model.checked\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [indeterminate]=\"model.indeterminate\" [labelPosition]=\"model.labelPosition || 'after'\" [name]=\"model.name\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\" (indeterminateChange)=\"onMatEvent($event, 'indeterminateChange')\"><span [ngClass]=\"getClass('element', 'label')\" [innerHTML]=\"model.label\"></span></mat-checkbox><mat-form-field *ngSwitchCase=\"3\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><mat-chip-list #matChipList [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [multiple]=\"true\"><mat-chip *ngFor=\"let chip of chipList; let index = index\" [selectable]=\"false\" (removed)=\"onChipRemoved(chip, index)\"><span>{{ chip }}</span><mat-icon matChipRemove>cancel</mat-icon></mat-chip><input matInput [placeholder]=\"model.placeholder\" [matChipInputFor]=\"matChipList\" [matChipInputAddOnBlur]=\"true\" [matChipInputSeparatorKeyCodes]=\"[13, 188]\" (matChipInputTokenEnd)=\"onChipInputTokenEnd($event)\"></mat-chip-list></mat-form-field><mat-form-field *ngSwitchCase=\"4\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span> <input matInput [autofocus]=\"model.autoFocus\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [max]=\"model.max\" [matDatepicker]=\"matDatepicker\" [min]=\"model.min\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" (blur)=\"onBlur($event)\" (dateChange)=\"onValueChange($event)\" (dateInput)=\"onCustomEvent($event, 'dateInput')\" (focus)=\"onFocus($event)\"> <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle><mat-datepicker #matDatepicker [opened]=\"getAdditional('opened', false)\" [startAt]=\"model.focusedDate\" [startView]=\"getAdditional('startView', 'month')\" [touchUi]=\"getAdditional('touchUi', false)\" (closed)=\"onCustomEvent($event, 'closed')\" (opened)=\"onCustomEvent($event, 'opened')\"></mat-datepicker><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field><div *ngSwitchCase=\"5\" role=\"group\" [dynamicId]=\"bindId && model.id\" [formGroupName]=\"model.id\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"><dynamic-material-form-control *ngFor=\"let _model of model.group\" [group]=\"control\" [hasErrorMessaging]=\"_model.hasErrorMessages\" [hidden]=\"_model.hidden\" [layout]=\"layout\" [model]=\"_model\" [templates]=\"templateList\" [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\" (dfBlur)=\"onBlur($event)\" (dfChange)=\"onValueChange($event)\" (dfFocus)=\"onFocus($event)\" (matEvent)=\"onCustomEvent($event)\"></dynamic-material-form-control></div><ng-container *ngSwitchCase=\"6\"><mat-form-field [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid','control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\" [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span> <input matInput [attr.accept]=\"model.accept\" [attr.list]=\"model.listId\" [attr.max]=\"model.max\" [attr.min]=\"model.min\" [attr.multiple]=\"model.multiple\" [attr.step]=\"model.step\" [autocomplete]=\"model.autoComplete\" [autofocus]=\"model.autoFocus\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [maxlength]=\"model.maxLength\" [matAutocomplete]=\"matAutocomplete\" [minlength]=\"model.minLength\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [pattern]=\"model.pattern\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" [spellcheck]=\"model.spellCheck\" [tabindex]=\"model.tabIndex\" [type]=\"model.inputType\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"> <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field><mat-autocomplete #matAutocomplete=\"matAutocomplete\" (optionSelected)=\"onValueChange($event)\"><mat-option *ngFor=\"let option of model.list\" [value]=\"option\">{{ option }}</mat-option></mat-autocomplete></ng-container><mat-radio-group *ngSwitchCase=\"7\" #matRadioGroup [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [name]=\"model.name\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"><mat-radio-button *ngFor=\"let option of model.options$ | async\" [labelPosition]=\"'after'\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'option')\" [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-radio-button></mat-radio-group><mat-form-field *ngSwitchCase=\"8\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span><mat-select #matSelect [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [multiple]=\"model.multiple\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [required]=\"model.required\" (change)=\"onValueChange($event)\" (closed)=\"onCustomEvent($event, 'closed')\" (opened)=\"onCustomEvent($event, 'opened')\"><mat-option *ngFor=\"let option of model.options$ | async\" [ngClass]=\"getClass('element', 'option')\" [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-option></mat-select><span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error></ng-container></mat-form-field><mat-slider *ngSwitchCase=\"9\" #matSlider [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [invert]=\"getAdditional('invert', false)\" [min]=\"model.min\" [max]=\"model.max\" [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\" [step]=\"model.step\" [tabIndex]=\"model.tabIndex\" [thumbLabel]=\"getAdditional('thumbLabel', true)\" [tickInterval]=\"getAdditional('tickInterval', 1)\" [vertical]=\"model.vertical\" (change)=\"onValueChange($event)\" (input)=\"onCustomEvent($event, 'input')\"></mat-slider><mat-slide-toggle *ngSwitchCase=\"10\" #matSlideToggle [checked]=\"model.checked\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [labelPosition]=\"model.labelPosition || 'after'\" [name]=\"model.name\" [ngClass]=\"[getClass('element','control'), getClass('grid','control')]\" (change)=\"onValueChange($event)\"><span *ngIf=\"!model.checked\" [innerHTML]=\"model.offLabel\"></span> <span *ngIf=\"model.checked\" [innerHTML]=\"model.onLabel\"></span></mat-slide-toggle><mat-form-field *ngSwitchCase=\"11\" [color]=\"getAdditional('color', 'primary')\" [ngClass]=\"getClass('grid', 'control')\" [floatLabel]=\"getAdditional('floatLabel', 'auto')\"><ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\"><mat-label>{{ model.label }}</mat-label></ng-container><textarea matInput [cols]=\"model.cols\" [formControlName]=\"model.id\" [id]=\"bindId ? model.id : null\" [maxlength]=\"model.maxLength\" [minlength]=\"model.minLength\" [name]=\"model.name\" [ngClass]=\"getClass('element', 'control')\" [placeholder]=\"model.placeholder\" [readonly]=\"model.readOnly\" [required]=\"model.required\" [rows]=\"model.rows\" [spellcheck]=\"model.spellCheck\" [tabindex]=\"model.tabIndex\" [wrap]=\"model.wrap\" (blur)=\"onBlur($event)\" (change)=\"onValueChange($event)\" (focus)=\"onFocus($event)\"></textarea><mat-hint *ngIf=\"showHint\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint><mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint><ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\"><mat-error *ngIf=\"hasErrorMessaging\">{{ message }}</mat-error></ng-container></mat-form-field></ng-container><ng-container *ngIf=\"!hasMatFormField && hasErrorMessaging\"><mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error></ng-container><ng-container *ngTemplateOutlet=\"templates[1]?.templateRef; context: model\"></ng-container><ng-content></ng-content></div>"
                },] },
    ];
    /** @nocollapse */
    DynamicMaterialFormControlComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
        { type: core$1.DynamicFormLayoutService, },
        { type: core$1.DynamicFormValidationService, },
    ]; };
    DynamicMaterialFormControlComponent.propDecorators = {
        "contentTemplateList": [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] },],
        "inputTemplateList": [{ type: core.Input, args: ["templates",] },],
        "bindId": [{ type: core.Input },],
        "context": [{ type: core.Input },],
        "group": [{ type: core.Input },],
        "hasErrorMessaging": [{ type: core.Input },],
        "layout": [{ type: core.Input },],
        "model": [{ type: core.Input },],
        "showCharacterHint": [{ type: core.Input },],
        "blur": [{ type: core.Output, args: ["dfBlur",] },],
        "change": [{ type: core.Output, args: ["dfChange",] },],
        "focus": [{ type: core.Output, args: ["dfFocus",] },],
        "customEvent": [{ type: core.Output, args: ["matEvent",] },],
        "matViewChild": [{ type: core.ViewChild, args: [MAT_VIEW_CHILD_SELECTOR,] },],
        "matInput": [{ type: core.ViewChild, args: [material.MatInput,] },],
    };
    return DynamicMaterialFormControlComponent;
}(core$1.DynamicFormControlComponent));

var __extends$1 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicMaterialFormComponent = /** @class */ (function (_super) {
    __extends$1(DynamicMaterialFormComponent, _super);
    function DynamicMaterialFormComponent(formService, layoutService) {
        var _this = _super.call(this, formService, layoutService) || this;
        _this.formService = formService;
        _this.layoutService = layoutService;
        _this.blur = new core.EventEmitter();
        _this.change = new core.EventEmitter();
        _this.focus = new core.EventEmitter();
        _this.customEvent = new core.EventEmitter();
        return _this;
    }
    DynamicMaterialFormComponent.decorators = [
        { type: core.Component, args: [{
                    selector: "dynamic-material-form",
                    template: "<dynamic-material-form-control *ngFor=\"let model of formModel; trackBy: trackByFn\" [group]=\"formGroup\" [hasErrorMessaging]=\"model.hasErrorMessages\" [hidden]=\"model.hidden\" [layout]=\"formLayout\" [model]=\"model\" [ngClass]=\"[getClass(model, 'element', 'host'), getClass(model, 'grid', 'host')]\" [showCharacterHint]=\"model.type === 'INPUT'\" [templates]=\"templates\" (dfBlur)=\"onEvent($event, 'blur')\" (dfChange)=\"onEvent($event, 'change')\" (dfFocus)=\"onEvent($event, 'focus')\" (matEvent)=\"onEvent($event, 'custom')\"></dynamic-material-form-control>"
                },] },
    ];
    /** @nocollapse */
    DynamicMaterialFormComponent.ctorParameters = function () { return [
        { type: core$1.DynamicFormService, },
        { type: core$1.DynamicFormLayoutService, },
    ]; };
    DynamicMaterialFormComponent.propDecorators = {
        "formGroup": [{ type: core.Input, args: ["group",] },],
        "formModel": [{ type: core.Input, args: ["model",] },],
        "formLayout": [{ type: core.Input, args: ["layout",] },],
        "blur": [{ type: core.Output, args: ["dfBlur",] },],
        "change": [{ type: core.Output, args: ["dfChange",] },],
        "focus": [{ type: core.Output, args: ["dfFocus",] },],
        "customEvent": [{ type: core.Output, args: ["matEvent",] },],
        "templates": [{ type: core.ContentChildren, args: [core$1.DynamicTemplateDirective,] },],
        "components": [{ type: core.ViewChildren, args: [DynamicMaterialFormControlComponent,] },],
    };
    return DynamicMaterialFormComponent;
}(core$1.DynamicFormComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DynamicFormsMaterialUIModule = /** @class */ (function () {
    function DynamicFormsMaterialUIModule() {
    }
    DynamicFormsMaterialUIModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        material.MatAutocompleteModule,
                        material.MatCheckboxModule,
                        material.MatChipsModule,
                        material.MatDatepickerModule,
                        material.MatIconModule,
                        material.MatInputModule,
                        material.MatRadioModule,
                        material.MatSelectModule,
                        material.MatSliderModule,
                        material.MatSlideToggleModule,
                        angular2TextMask.TextMaskModule,
                        core$1.DynamicFormsCoreModule
                    ],
                    declarations: [
                        DynamicMaterialFormControlComponent,
                        DynamicMaterialFormComponent
                    ],
                    exports: [
                        core$1.DynamicFormsCoreModule,
                        DynamicMaterialFormControlComponent,
                        DynamicMaterialFormComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    DynamicFormsMaterialUIModule.ctorParameters = function () { return []; };
    return DynamicFormsMaterialUIModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

exports.DynamicMaterialFormComponent = DynamicMaterialFormComponent;
exports.MatFormControlType = MatFormControlType;
exports.MAT_VIEW_CHILD_SELECTOR = MAT_VIEW_CHILD_SELECTOR;
exports.MAT_LABEL_POSITION_AFTER = MAT_LABEL_POSITION_AFTER;
exports.MAT_LABEL_POSITION_BEFORE = MAT_LABEL_POSITION_BEFORE;
exports.DynamicMaterialFormControlComponent = DynamicMaterialFormControlComponent;
exports.DynamicFormsMaterialUIModule = DynamicFormsMaterialUIModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ui-material.umd.js.map
