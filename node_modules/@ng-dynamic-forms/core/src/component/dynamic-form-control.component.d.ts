import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from "@angular/core";
import { FormControl, FormGroup } from "@angular/forms";
import { DynamicFormControlModel } from "../model/dynamic-form-control.model";
import { DynamicFormControlValue } from "../model/dynamic-form-value-control.model";
import { DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DynamicFormControlRelationGroup } from "../model/misc/dynamic-form-control-relation.model";
import { DynamicTemplateDirective } from "../directive/dynamic-template.directive";
import { DynamicFormLayout, DynamicFormLayoutService } from "../service/dynamic-form-layout.service";
import { DynamicFormValidationService } from "../service/dynamic-form-validation.service";
export interface DynamicFormControlEvent {
    $event: Event | FocusEvent | DynamicFormControlEvent | any;
    context: DynamicFormArrayGroupModel | null;
    control: FormControl;
    group: FormGroup;
    model: DynamicFormControlModel;
    type: string;
}
export declare const DYNAMIC_FORM_CONTROL_EVENT_TYPE_BLUR = "blur";
export declare const DYNAMIC_FORM_CONTROL_EVENT_TYPE_CHANGE = "change";
export declare const DYNAMIC_FORM_CONTROL_EVENT_TYPE_FOCUS = "focus";
export declare const DYNAMIC_FORM_CONTROL_EVENT_TYPE_CUSTOM = "custom";
export declare enum DynamicFormControlComponentTemplatePosition {
    start = 0,
    end = 1,
    array = 2,
}
export declare abstract class DynamicFormControlComponent implements OnChanges, OnInit, AfterViewInit, OnDestroy {
    protected changeDetectorRef: ChangeDetectorRef;
    protected layoutService: DynamicFormLayoutService;
    protected validationService: DynamicFormValidationService;
    bindId: boolean;
    context: DynamicFormArrayGroupModel | null;
    control: FormControl;
    group: FormGroup;
    hasErrorMessaging: boolean;
    hasFocus: boolean;
    layout: DynamicFormLayout;
    model: DynamicFormControlModel;
    contentTemplateList: QueryList<DynamicTemplateDirective>;
    inputTemplateList: QueryList<DynamicTemplateDirective> | null;
    templates: DynamicTemplateDirective[];
    blur: EventEmitter<DynamicFormControlEvent>;
    change: EventEmitter<DynamicFormControlEvent>;
    focus: EventEmitter<DynamicFormControlEvent>;
    customEvent: EventEmitter<DynamicFormControlEvent>;
    private subscriptions;
    abstract type: number | string | null;
    constructor(changeDetectorRef: ChangeDetectorRef, layoutService: DynamicFormLayoutService, validationService: DynamicFormValidationService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    readonly errorMessages: string[];
    readonly showHint: boolean;
    readonly hasList: boolean;
    readonly isInvalid: boolean;
    readonly isValid: boolean;
    readonly showErrorMessages: boolean;
    readonly templateList: QueryList<DynamicTemplateDirective>;
    getClass(context: string, place: string, model?: DynamicFormControlModel): string;
    getAdditional(key: string, defaultValue?: any): any;
    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent;
    protected setTemplates(): void;
    protected setControlRelations(): void;
    updateModelDisabled(relation: DynamicFormControlRelationGroup): void;
    unsubscribe(): void;
    onControlValueChanges(value: DynamicFormControlValue): void;
    onModelValueUpdates(value: DynamicFormControlValue): void;
    onModelDisabledUpdates(value: boolean): void;
    onValueChange($event: Event | DynamicFormControlEvent | any): void;
    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void;
    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void;
    onCustomEvent($event: any, type: string): void;
    static isDynamicFormControlEvent($event: any): boolean;
}
