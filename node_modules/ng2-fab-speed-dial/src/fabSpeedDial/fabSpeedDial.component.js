import { Component, Input, ContentChildren, ContentChild, ElementRef, HostListener, Directive } from '@angular/core';
var FabButtonDirective = /** @class */ (function () {
    function FabButtonDirective() {
    }
    FabButtonDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fab-button]',
                    host: {
                        '[class.fab-button]': 'true'
                    }
                },] },
    ];
    /**
     * @nocollapse
     */
    FabButtonDirective.ctorParameters = function () { return []; };
    return FabButtonDirective;
}());
export { FabButtonDirective };
function FabButtonDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    FabButtonDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    FabButtonDirective.ctorParameters;
}
var FabToggleDirective = /** @class */ (function () {
    function FabToggleDirective() {
    }
    FabToggleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fab-toggle]',
                    host: {
                        '[class.fab-toggle]': 'true'
                    },
                },] },
    ];
    /**
     * @nocollapse
     */
    FabToggleDirective.ctorParameters = function () { return []; };
    return FabToggleDirective;
}());
export { FabToggleDirective };
function FabToggleDirective_tsickle_Closure_declarations() {
    /** @type {?} */
    FabToggleDirective.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    FabToggleDirective.ctorParameters;
}
var FabSpeedDialComponent = /** @class */ (function () {
    /**
     * @param {?} element
     */
    function FabSpeedDialComponent(element) {
        this.element = element;
        this.direction = 'right';
    }
    /**
     * @return {?}
     */
    FabSpeedDialComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.btnArray = this.buttons.toArray();
        this.undoTranslation();
        this.toggle.nativeElement.onclick = function () {
            _this.active = !_this.active;
            _this.updateButtons();
        };
    };
    /**
     * @return {?}
     */
    FabSpeedDialComponent.prototype.undoTranslation = function () {
        var /** @type {?} */ tWidth = this.toggle.nativeElement.offsetWidth;
        var /** @type {?} */ tHeight = this.toggle.nativeElement.offsetHeight;
        for (var /** @type {?} */ i = 0; i < this.btnArray.length; i++) {
            var /** @type {?} */ bHeight = this.btnArray[i].nativeElement.offsetHeight;
            var /** @type {?} */ bWidth = this.btnArray[i].nativeElement.offsetWidth;
            var /** @type {?} */ style = this.btnArray[i].nativeElement.style;
            style['visibility'] = 'hidden';
            style['transition-duration'] = '';
            style['transform'] = "translate3d(" + (tWidth - bWidth) / 2 + "px, " + (tHeight - bHeight) / 2 + "px ,0)";
        }
    };
    /**
     * @param {?} xTrans
     * @param {?} yTrans
     * @param {?} tWidth
     * @param {?} tHeight
     * @param {?} bWidth
     * @param {?} bHeight
     * @return {?}
     */
    FabSpeedDialComponent.prototype.getTranslate = function (xTrans, yTrans, tWidth, tHeight, bWidth, bHeight) {
        if (this.direction === 'left') {
            return "translate3d(" + -xTrans + "px, " + (tHeight - bHeight) / 2 + "px, 0)";
        }
        else if (this.direction === 'right') {
            return "translate3d(" + xTrans + "px, " + (tHeight - bHeight) / 2 + "px, 0)";
        }
        else if (this.direction === 'up') {
            return "translate3d(" + (tWidth - bWidth) / 2 + "px, " + -yTrans + "px,0)";
        }
        else if (this.direction === 'down') {
            return "translate3d(" + (tWidth - bWidth) / 2 + "px, " + yTrans + "px, 0)";
        }
        else {
            console.error("Unsupported direction for Fab; " + this.direction);
        }
    };
    /**
     * @return {?}
     */
    FabSpeedDialComponent.prototype.doTranslation = function () {
        var /** @type {?} */ tWidth = this.toggle.nativeElement.offsetWidth;
        var /** @type {?} */ tHeight = this.toggle.nativeElement.offsetHeight;
        var /** @type {?} */ xTrans = 0, /** @type {?} */ yTrans = 0;
        var /** @type {?} */ bWidth = tWidth, /** @type {?} */ bHeight = tHeight;
        for (var /** @type {?} */ i = 0; i < this.btnArray.length; i++) {
            bHeight = this.btnArray[i].nativeElement.offsetHeight;
            bWidth = this.btnArray[i].nativeElement.offsetWidth;
            xTrans += bWidth + 10;
            yTrans += bHeight + 10;
            var /** @type {?} */ style = this.btnArray[i].nativeElement.style;
            style['visibility'] = 'visible';
            style['transition-duration'] = 90 + (100 * (i + 1)) + "ms";
            style['transform'] = this.getTranslate(xTrans, yTrans, tWidth, tHeight, bWidth, bHeight);
        }
    };
    /**
     * @return {?}
     */
    FabSpeedDialComponent.prototype.updateButtons = function () {
        if (this.active) {
            this.doTranslation();
        }
        else {
            this.undoTranslation();
        }
    };
    /**
     * @param {?} target
     * @return {?}
     */
    FabSpeedDialComponent.prototype.onDocumentClick = function (target) {
        if (this.active && !this.element.nativeElement.contains(target)) {
            this.active = false;
            this.updateButtons();
        }
    };
    FabSpeedDialComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fab-speed-dial',
                    template: "\n    <div class=\"fab-menu\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    styles: ["\n    .fab-menu {\n      position: relative;\n      display: inline-block;\n    }\n\n    .fab-menu ::ng-deep .fab-button {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      transition-timing-function: ease-out;\n      transition-property: transform;\n    }\n\n    .fab-menu ::ng-deep .fab-toggle {\n      z-index: 2;\n    }\n  "]
                },] },
    ];
    /**
     * @nocollapse
     */
    FabSpeedDialComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    FabSpeedDialComponent.propDecorators = {
        'direction': [{ type: Input, args: ['direction',] },],
        'toggle': [{ type: ContentChild, args: [FabToggleDirective, { read: ElementRef },] },],
        'buttons': [{ type: ContentChildren, args: [FabButtonDirective, { read: ElementRef },] },],
        'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event.target'],] },],
    };
    return FabSpeedDialComponent;
}());
export { FabSpeedDialComponent };
function FabSpeedDialComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    FabSpeedDialComponent.decorators;
    /**
     * @nocollapse
     * @type {?}
     */
    FabSpeedDialComponent.ctorParameters;
    /** @type {?} */
    FabSpeedDialComponent.propDecorators;
    /** @type {?} */
    FabSpeedDialComponent.prototype.active;
    /** @type {?} */
    FabSpeedDialComponent.prototype.direction;
    /** @type {?} */
    FabSpeedDialComponent.prototype.toggle;
    /** @type {?} */
    FabSpeedDialComponent.prototype.buttons;
    /** @type {?} */
    FabSpeedDialComponent.prototype.btnArray;
    /** @type {?} */
    FabSpeedDialComponent.prototype.element;
}
//# sourceMappingURL=fabSpeedDial.component.js.map